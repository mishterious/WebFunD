{"version":3,"sources":["webpack:///7.e4edf2d3f31281dc5577.js","webpack:///./components/claim/claim_controller.jsx","webpack:///./components/claim/components/oauth_to_email.jsx","webpack:///./components/claim/components/email_to_oauth.jsx","webpack:///./components/claim/components/ldap_to_email.jsx","webpack:///./components/claim/components/email_to_ldap.jsx"],"names":["webpackJsonp","2516","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_extends2","_extends3","_getPrototypeOf","_getPrototypeOf2","_classCallCheck2","_classCallCheck3","_createClass2","_createClass3","_possibleConstructorReturn2","_possibleConstructorReturn3","_inherits2","_inherits3","_propTypes","_propTypes2","_react","_react2","_reactRouterDom","_logo","_logo2","_back_button","_back_button2","_oauth_to_email","_oauth_to_email2","_email_to_oauth","_email_to_oauth2","_ldap_to_email","_ldap_to_email2","_email_to_ldap","_email_to_ldap2","ClaimController","_React$Component","props","this","_this","__proto__","call","state","key","setState","email","URLSearchParams","location","search","get","newType","currentType","_this2","createElement","className","src","id","Switch","Route","path","match","url","render","Component","defaultProps","propTypes","object","isRequired","children","node","2517","global","_reactDom","_reactDom2","_reactIntl","_admin_actions","_constants","_constants2","_utils","Utils","newObj","prototype","hasOwnProperty","OAuthToEmail","submit","bind","e","preventDefault","password","findDOMNode","refs","error","localizeMessage","passwordErr","isValidPassword","getPasswordConfig","confirmPassword","passwordconfirm","oauthToEmail","err","message","formClass","uiType","SAML_SERVICE","toUpperCase","toTitleCase","FormattedMessage","defaultMessage","values","type","onSubmit","site","window","mm_config","SiteName","name","ref","placeholder","spellCheck","string","2518","_user_actions","_login_mfa","_login_mfa2","EmailToOAuth","preSubmit","showMfa","checkMfa","requiresMfa","loginId","token","_this3","emailToOAuth","data","follow_link","href","content","2519","LDAPToEmail","passwordError","confirmError","ldapPasswordError","serverError","ldapPassword","ldappassword","switchFromLdapToEmail","startsWith","passwordClass","ldapPasswordClass","confimClass","passwordPlaceholder","LdapPasswordFieldName","2520","EmailToLDAP","ldapError","emailpassword","ldapId","ldapid","trim","emailToLdap","ldapClass","loginPlaceholder","LdapLoginFieldName","style","usernameInput","autoComplete","display"],"mappings":"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","file":"7.e4edf2d3f31281dc5577.js","sourcesContent":["webpackJsonp([7],{\n\n/***/ 2516:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends2 = __webpack_require__(44);\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _getPrototypeOf = __webpack_require__(239);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(238);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(242);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(240);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(241);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _propTypes = __webpack_require__(21);\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = __webpack_require__(13);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactRouterDom = __webpack_require__(244);\n\nvar _logo = __webpack_require__(791);\n\nvar _logo2 = _interopRequireDefault(_logo);\n\nvar _back_button = __webpack_require__(792);\n\nvar _back_button2 = _interopRequireDefault(_back_button);\n\nvar _oauth_to_email = __webpack_require__(2517);\n\nvar _oauth_to_email2 = _interopRequireDefault(_oauth_to_email);\n\nvar _email_to_oauth = __webpack_require__(2518);\n\nvar _email_to_oauth2 = _interopRequireDefault(_email_to_oauth);\n\nvar _ldap_to_email = __webpack_require__(2519);\n\nvar _ldap_to_email2 = _interopRequireDefault(_ldap_to_email);\n\nvar _email_to_ldap = __webpack_require__(2520);\n\nvar _email_to_ldap2 = _interopRequireDefault(_email_to_ldap);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ClaimController = function (_React$Component) {\n    (0, _inherits3.default)(ClaimController, _React$Component);\n\n    function ClaimController(props) {\n        (0, _classCallCheck3.default)(this, ClaimController);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (ClaimController.__proto__ || (0, _getPrototypeOf2.default)(ClaimController)).call(this, props));\n\n        _this.state = {};\n        return _this;\n    }\n\n    (0, _createClass3.default)(ClaimController, [{\n        key: 'componentWillMount',\n        value: function componentWillMount() {\n            this.setState({\n                email: new URLSearchParams(this.props.location.search).get('email'),\n                newType: new URLSearchParams(this.props.location.search).get('new_type'),\n                currentType: new URLSearchParams(this.props.location.search).get('old_type')\n            });\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var _this2 = this;\n\n            return _react2.default.createElement(\n                'div',\n                null,\n                _react2.default.createElement(_back_button2.default, null),\n                _react2.default.createElement(\n                    'div',\n                    { className: 'col-sm-12' },\n                    _react2.default.createElement(\n                        'div',\n                        { className: 'signup-team__container' },\n                        _react2.default.createElement('img', {\n                            className: 'signup-team-logo',\n                            src: _logo2.default\n                        }),\n                        _react2.default.createElement(\n                            'div',\n                            { id: 'claim' },\n                            _react2.default.createElement(\n                                _reactRouterDom.Switch,\n                                null,\n                                _react2.default.createElement(_reactRouterDom.Route, {\n                                    path: this.props.match.url + '/oauth_to_email',\n                                    render: function render(props) {\n                                        return _react2.default.createElement(_oauth_to_email2.default, (0, _extends3.default)({}, _this2.state, props));\n                                    }\n                                }),\n                                _react2.default.createElement(_reactRouterDom.Route, {\n                                    path: this.props.match.url + '/email_to_oauth',\n                                    render: function render(props) {\n                                        return _react2.default.createElement(_email_to_oauth2.default, (0, _extends3.default)({}, _this2.state, props));\n                                    }\n                                }),\n                                _react2.default.createElement(_reactRouterDom.Route, {\n                                    path: this.props.match.url + '/ldap_to_email',\n                                    render: function render(props) {\n                                        return _react2.default.createElement(_ldap_to_email2.default, (0, _extends3.default)({}, _this2.state, props));\n                                    }\n                                }),\n                                _react2.default.createElement(_reactRouterDom.Route, {\n                                    path: this.props.match.url + '/email_to_ldap',\n                                    render: function render(props) {\n                                        return _react2.default.createElement(_email_to_ldap2.default, (0, _extends3.default)({}, _this2.state, props));\n                                    }\n                                })\n                            )\n                        )\n                    )\n                )\n            );\n        }\n    }]);\n    return ClaimController;\n}(_react2.default.Component); // Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nexports.default = ClaimController;\n\n\nClaimController.defaultProps = {};\nClaimController.propTypes = {\n    location: _propTypes2.default.object.isRequired,\n    children: _propTypes2.default.node\n};\n\n/***/ }),\n\n/***/ 2517:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(239);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(238);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(242);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(240);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(241);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _propTypes = __webpack_require__(21);\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = __webpack_require__(13);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = __webpack_require__(246);\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _reactIntl = __webpack_require__(697);\n\nvar _admin_actions = __webpack_require__(738);\n\nvar _constants = __webpack_require__(43);\n\nvar _constants2 = _interopRequireDefault(_constants);\n\nvar _utils = __webpack_require__(698);\n\nvar Utils = _interopRequireWildcard(_utils);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar OAuthToEmail = function (_React$Component) {\n    (0, _inherits3.default)(OAuthToEmail, _React$Component);\n\n    function OAuthToEmail(props) {\n        (0, _classCallCheck3.default)(this, OAuthToEmail);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (OAuthToEmail.__proto__ || (0, _getPrototypeOf2.default)(OAuthToEmail)).call(this, props));\n\n        _this.submit = _this.submit.bind(_this);\n\n        _this.state = {};\n        return _this;\n    }\n\n    (0, _createClass3.default)(OAuthToEmail, [{\n        key: 'submit',\n        value: function submit(e) {\n            var _this2 = this;\n\n            e.preventDefault();\n            var state = {};\n\n            var password = _reactDom2.default.findDOMNode(this.refs.password).value;\n            if (!password) {\n                state.error = Utils.localizeMessage('claim.oauth_to_email.enterPwd', 'Please enter a password.');\n                this.setState(state);\n                return;\n            }\n\n            var passwordErr = Utils.isValidPassword(password, Utils.getPasswordConfig());\n            if (passwordErr !== '') {\n                this.setState({\n                    error: passwordErr\n                });\n                return;\n            }\n\n            var confirmPassword = _reactDom2.default.findDOMNode(this.refs.passwordconfirm).value;\n            if (!confirmPassword || password !== confirmPassword) {\n                state.error = Utils.localizeMessage('claim.oauth_to_email.pwdNotMatch', 'Password do not match.');\n                this.setState(state);\n                return;\n            }\n\n            state.error = null;\n            this.setState(state);\n\n            (0, _admin_actions.oauthToEmail)(this.props.currentType, this.props.email, password, null, function (err) {\n                _this2.setState({ error: err.message });\n            });\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var error = null;\n            if (this.state.error) {\n                error = _react2.default.createElement(\n                    'div',\n                    { className: 'form-group has-error' },\n                    _react2.default.createElement(\n                        'label',\n                        { className: 'control-label' },\n                        this.state.error\n                    )\n                );\n            }\n\n            var formClass = 'form-group';\n            if (error) {\n                formClass += ' has-error';\n            }\n\n            var uiType = (this.props.currentType === _constants2.default.SAML_SERVICE ? _constants2.default.SAML_SERVICE.toUpperCase() : Utils.toTitleCase(this.props.currentType)) + ' SSO';\n\n            return _react2.default.createElement(\n                'div',\n                null,\n                _react2.default.createElement(\n                    'h3',\n                    null,\n                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'claim.oauth_to_email.title',\n                        defaultMessage: 'Switch {type} Account to Email',\n                        values: {\n                            type: uiType\n                        }\n                    })\n                ),\n                _react2.default.createElement(\n                    'form',\n                    { onSubmit: this.submit },\n                    _react2.default.createElement(\n                        'p',\n                        null,\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'claim.oauth_to_email.description',\n                            defaultMessage: 'Upon changing your account type, you will only be able to login with your email and password.'\n                        })\n                    ),\n                    _react2.default.createElement(\n                        'p',\n                        null,\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'claim.oauth_to_email.enterNewPwd',\n                            defaultMessage: 'Enter a new password for your {site} email account',\n                            values: {\n                                site: global.window.mm_config.SiteName\n                            }\n                        })\n                    ),\n                    _react2.default.createElement(\n                        'div',\n                        { className: formClass },\n                        _react2.default.createElement('input', {\n                            type: 'password',\n                            className: 'form-control',\n                            name: 'password',\n                            ref: 'password',\n                            placeholder: Utils.localizeMessage('claim.oauth_to_email.newPwd', 'New Password'),\n                            spellCheck: 'false'\n                        })\n                    ),\n                    _react2.default.createElement(\n                        'div',\n                        { className: formClass },\n                        _react2.default.createElement('input', {\n                            type: 'password',\n                            className: 'form-control',\n                            name: 'passwordconfirm',\n                            ref: 'passwordconfirm',\n                            placeholder: Utils.localizeMessage('claim.oauth_to_email.confirm', 'Confirm Password'),\n                            spellCheck: 'false'\n                        })\n                    ),\n                    error,\n                    _react2.default.createElement(\n                        'button',\n                        {\n                            type: 'submit',\n                            className: 'btn btn-primary'\n                        },\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'claim.oauth_to_email.switchTo',\n                            defaultMessage: 'Switch {type} to email and password',\n                            values: {\n                                type: uiType\n                            }\n                        })\n                    )\n                )\n            );\n        }\n    }]);\n    return OAuthToEmail;\n}(_react2.default.Component); // Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nexports.default = OAuthToEmail;\n\n\nOAuthToEmail.defaultProps = {};\nOAuthToEmail.propTypes = {\n    currentType: _propTypes2.default.string,\n    email: _propTypes2.default.string\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(22)))\n\n/***/ }),\n\n/***/ 2518:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(239);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(238);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(242);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(240);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(241);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _propTypes = __webpack_require__(21);\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = __webpack_require__(13);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = __webpack_require__(246);\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _reactIntl = __webpack_require__(697);\n\nvar _admin_actions = __webpack_require__(738);\n\nvar _user_actions = __webpack_require__(717);\n\nvar _constants = __webpack_require__(43);\n\nvar _constants2 = _interopRequireDefault(_constants);\n\nvar _utils = __webpack_require__(698);\n\nvar Utils = _interopRequireWildcard(_utils);\n\nvar _login_mfa = __webpack_require__(925);\n\nvar _login_mfa2 = _interopRequireDefault(_login_mfa);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar EmailToOAuth = function (_React$Component) {\n    (0, _inherits3.default)(EmailToOAuth, _React$Component);\n\n    function EmailToOAuth(props) {\n        (0, _classCallCheck3.default)(this, EmailToOAuth);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (EmailToOAuth.__proto__ || (0, _getPrototypeOf2.default)(EmailToOAuth)).call(this, props));\n\n        _this.submit = _this.submit.bind(_this);\n        _this.preSubmit = _this.preSubmit.bind(_this);\n\n        _this.state = { showMfa: false, password: '' };\n        return _this;\n    }\n\n    (0, _createClass3.default)(EmailToOAuth, [{\n        key: 'preSubmit',\n        value: function preSubmit(e) {\n            var _this2 = this;\n\n            e.preventDefault();\n            var state = {};\n\n            var password = _reactDom2.default.findDOMNode(this.refs.password).value;\n            if (!password) {\n                state.error = Utils.localizeMessage('claim.email_to_oauth.pwdError', 'Please enter your password.');\n                this.setState(state);\n                return;\n            }\n\n            this.setState({ password: password });\n\n            state.error = null;\n            this.setState(state);\n\n            (0, _user_actions.checkMfa)(this.props.email, function (requiresMfa) {\n                if (requiresMfa) {\n                    _this2.setState({ showMfa: true });\n                } else {\n                    _this2.submit(_this2.props.email, password, '');\n                }\n            }, function (err) {\n                _this2.setState({ error: err.message });\n            });\n        }\n    }, {\n        key: 'submit',\n        value: function submit(loginId, password, token) {\n            var _this3 = this;\n\n            (0, _admin_actions.emailToOAuth)(loginId, password, token, this.props.newType, function (data) {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            }, function (err) {\n                _this3.setState({ error: err.message, showMfa: false });\n            });\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var error = null;\n            if (this.state.error) {\n                error = _react2.default.createElement(\n                    'div',\n                    { className: 'form-group has-error' },\n                    _react2.default.createElement(\n                        'label',\n                        { className: 'control-label' },\n                        this.state.error\n                    )\n                );\n            }\n\n            var formClass = 'form-group';\n            if (error) {\n                formClass += ' has-error';\n            }\n\n            var type = this.props.newType === _constants2.default.SAML_SERVICE ? _constants2.default.SAML_SERVICE.toUpperCase() : Utils.toTitleCase(this.props.newType);\n            var uiType = type + ' SSO';\n\n            var content = void 0;\n            if (this.state.showMfa) {\n                content = _react2.default.createElement(_login_mfa2.default, {\n                    loginId: this.props.email,\n                    password: this.state.password,\n                    submit: this.submit\n                });\n            } else {\n                content = _react2.default.createElement(\n                    'form',\n                    { onSubmit: this.preSubmit },\n                    _react2.default.createElement(\n                        'p',\n                        null,\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'claim.email_to_oauth.ssoType',\n                            defaultMessage: 'Upon claiming your account, you will only be able to login with {type} SSO',\n                            values: {\n                                type: type\n                            }\n                        })\n                    ),\n                    _react2.default.createElement(\n                        'p',\n                        null,\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'claim.email_to_oauth.ssoNote',\n                            defaultMessage: 'You must already have a valid {type} account',\n                            values: {\n                                type: type\n                            }\n                        })\n                    ),\n                    _react2.default.createElement(\n                        'p',\n                        null,\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'claim.email_to_oauth.enterPwd',\n                            defaultMessage: 'Enter the password for your {site} account',\n                            values: {\n                                site: global.window.mm_config.SiteName\n                            }\n                        })\n                    ),\n                    _react2.default.createElement(\n                        'div',\n                        { className: formClass },\n                        _react2.default.createElement('input', {\n                            type: 'password',\n                            className: 'form-control',\n                            name: 'password',\n                            ref: 'password',\n                            placeholder: Utils.localizeMessage('claim.email_to_oauth.pwd', 'Password'),\n                            spellCheck: 'false'\n                        })\n                    ),\n                    error,\n                    _react2.default.createElement(\n                        'button',\n                        {\n                            type: 'submit',\n                            className: 'btn btn-primary'\n                        },\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'claim.email_to_oauth.switchTo',\n                            defaultMessage: 'Switch account to {uiType}',\n                            values: {\n                                uiType: uiType\n                            }\n                        })\n                    )\n                );\n            }\n\n            return _react2.default.createElement(\n                'div',\n                null,\n                _react2.default.createElement(\n                    'h3',\n                    null,\n                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'claim.email_to_oauth.title',\n                        defaultMessage: 'Switch Email/Password Account to {uiType}',\n                        values: {\n                            uiType: uiType\n                        }\n                    })\n                ),\n                content\n            );\n        }\n    }]);\n    return EmailToOAuth;\n}(_react2.default.Component); // Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nexports.default = EmailToOAuth;\n\n\nEmailToOAuth.defaultProps = {};\nEmailToOAuth.propTypes = {\n    newType: _propTypes2.default.string,\n    email: _propTypes2.default.string\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(22)))\n\n/***/ }),\n\n/***/ 2519:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(239);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(238);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(242);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(240);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(241);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _propTypes = __webpack_require__(21);\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = __webpack_require__(13);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactIntl = __webpack_require__(697);\n\nvar _user_actions = __webpack_require__(717);\n\nvar _utils = __webpack_require__(698);\n\nvar Utils = _interopRequireWildcard(_utils);\n\nvar _login_mfa = __webpack_require__(925);\n\nvar _login_mfa2 = _interopRequireDefault(_login_mfa);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nvar LDAPToEmail = function (_React$Component) {\n    (0, _inherits3.default)(LDAPToEmail, _React$Component);\n\n    function LDAPToEmail(props) {\n        (0, _classCallCheck3.default)(this, LDAPToEmail);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (LDAPToEmail.__proto__ || (0, _getPrototypeOf2.default)(LDAPToEmail)).call(this, props));\n\n        _this.submit = _this.submit.bind(_this);\n        _this.preSubmit = _this.preSubmit.bind(_this);\n\n        _this.state = {\n            passwordError: '',\n            confirmError: '',\n            ldapPasswordError: '',\n            serverError: ''\n        };\n        return _this;\n    }\n\n    (0, _createClass3.default)(LDAPToEmail, [{\n        key: 'preSubmit',\n        value: function preSubmit(e) {\n            var _this2 = this;\n\n            e.preventDefault();\n\n            var state = {\n                passwordError: '',\n                confirmError: '',\n                ldapPasswordError: '',\n                serverError: ''\n            };\n\n            var ldapPassword = this.refs.ldappassword.value;\n            if (!ldapPassword) {\n                state.ldapPasswordError = Utils.localizeMessage('claim.ldap_to_email.ldapPasswordError', 'Please enter your AD/LDAP password.');\n                this.setState(state);\n                return;\n            }\n\n            var password = this.refs.password.value;\n            if (!password) {\n                state.passwordError = Utils.localizeMessage('claim.ldap_to_email.pwdError', 'Please enter your password.');\n                this.setState(state);\n                return;\n            }\n\n            var passwordErr = Utils.isValidPassword(password, Utils.getPasswordConfig());\n            if (passwordErr !== '') {\n                this.setState({\n                    passwordError: passwordErr\n                });\n                return;\n            }\n\n            var confirmPassword = this.refs.passwordconfirm.value;\n            if (!confirmPassword || password !== confirmPassword) {\n                state.confirmError = Utils.localizeMessage('claim.ldap_to_email.pwdNotMatch', 'Passwords do not match.');\n                this.setState(state);\n                return;\n            }\n\n            state.password = password;\n            state.ldapPassword = ldapPassword;\n            this.setState(state);\n\n            (0, _user_actions.checkMfa)(this.props.email, function (requiresMfa) {\n                if (requiresMfa) {\n                    _this2.setState({ showMfa: true });\n                } else {\n                    _this2.submit(_this2.props.email, password, '', ldapPassword);\n                }\n            }, function (err) {\n                _this2.setState({ error: err.message });\n            });\n        }\n    }, {\n        key: 'submit',\n        value: function submit(loginId, password, token, ldapPassword) {\n            var _this3 = this;\n\n            (0, _user_actions.switchFromLdapToEmail)(this.props.email, password, token, ldapPassword || this.state.ldapPassword, function (data) {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            }, function (err) {\n                if (err.id.startsWith('model.user.is_valid.pwd')) {\n                    _this3.setState({ passwordError: err.message, showMfa: false });\n                } else {\n                    switch (err.id) {\n                        case 'ent.ldap.do_login.invalid_password.app_error':\n                            _this3.setState({ ldapPasswordError: err.message, showMfa: false });\n                            break;\n                        default:\n                            _this3.setState({ serverError: err.message, showMfa: false });\n                    }\n                }\n            });\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var serverError = null;\n            var formClass = 'form-group';\n            if (this.state.serverError) {\n                serverError = _react2.default.createElement(\n                    'div',\n                    { className: 'form-group has-error' },\n                    _react2.default.createElement(\n                        'label',\n                        { className: 'control-label' },\n                        this.state.serverError\n                    )\n                );\n                formClass += ' has-error';\n            }\n\n            var passwordError = null;\n            var passwordClass = 'form-group';\n            if (this.state.passwordError) {\n                passwordError = _react2.default.createElement(\n                    'div',\n                    { className: 'form-group has-error' },\n                    _react2.default.createElement(\n                        'label',\n                        { className: 'control-label' },\n                        this.state.passwordError\n                    )\n                );\n                passwordClass += ' has-error';\n            }\n\n            var ldapPasswordError = null;\n            var ldapPasswordClass = 'form-group';\n            if (this.state.ldapPasswordError) {\n                ldapPasswordError = _react2.default.createElement(\n                    'div',\n                    { className: 'form-group has-error' },\n                    _react2.default.createElement(\n                        'label',\n                        { className: 'control-label' },\n                        this.state.ldapPasswordError\n                    )\n                );\n                ldapPasswordClass += ' has-error';\n            }\n\n            var confirmError = null;\n            var confimClass = 'form-group';\n            if (this.state.confirmError) {\n                confirmError = _react2.default.createElement(\n                    'div',\n                    { className: 'form-group has-error' },\n                    _react2.default.createElement(\n                        'label',\n                        { className: 'control-label' },\n                        this.state.confirmError\n                    )\n                );\n                confimClass += ' has-error';\n            }\n\n            var passwordPlaceholder = void 0;\n            if (global.window.mm_config.LdapPasswordFieldName) {\n                passwordPlaceholder = global.window.mm_config.LdapPasswordFieldName;\n            } else {\n                passwordPlaceholder = Utils.localizeMessage('claim.ldap_to_email.ldapPwd', 'AD/LDAP Password');\n            }\n\n            var content = void 0;\n            if (this.state.showMfa) {\n                content = _react2.default.createElement(_login_mfa2.default, {\n                    loginId: this.props.email,\n                    password: this.state.password,\n                    submit: this.submit\n                });\n            } else {\n                content = _react2.default.createElement(\n                    'form',\n                    {\n                        onSubmit: this.preSubmit,\n                        className: formClass\n                    },\n                    _react2.default.createElement(\n                        'p',\n                        null,\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'claim.ldap_to_email.email',\n                            defaultMessage: 'After switching your authentication method, you will use {email} to login. Your AD/LDAP credentials will no longer allow access to Mattermost.',\n                            values: {\n                                email: this.props.email\n                            }\n                        })\n                    ),\n                    _react2.default.createElement(\n                        'p',\n                        null,\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'claim.ldap_to_email.enterLdapPwd',\n                            defaultMessage: '{ldapPassword}:',\n                            values: {\n                                ldapPassword: passwordPlaceholder\n                            }\n                        })\n                    ),\n                    _react2.default.createElement(\n                        'div',\n                        { className: ldapPasswordClass },\n                        _react2.default.createElement('input', {\n                            type: 'password',\n                            className: 'form-control',\n                            name: 'ldapPassword',\n                            ref: 'ldappassword',\n                            placeholder: passwordPlaceholder,\n                            spellCheck: 'false'\n                        })\n                    ),\n                    ldapPasswordError,\n                    _react2.default.createElement(\n                        'p',\n                        null,\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'claim.ldap_to_email.enterPwd',\n                            defaultMessage: 'New email login password:'\n                        })\n                    ),\n                    _react2.default.createElement(\n                        'div',\n                        { className: passwordClass },\n                        _react2.default.createElement('input', {\n                            type: 'password',\n                            className: 'form-control',\n                            name: 'password',\n                            ref: 'password',\n                            placeholder: Utils.localizeMessage('claim.ldap_to_email.pwd', 'Password'),\n                            spellCheck: 'false'\n                        })\n                    ),\n                    passwordError,\n                    _react2.default.createElement(\n                        'div',\n                        { className: confimClass },\n                        _react2.default.createElement('input', {\n                            type: 'password',\n                            className: 'form-control',\n                            name: 'passwordconfirm',\n                            ref: 'passwordconfirm',\n                            placeholder: Utils.localizeMessage('claim.ldap_to_email.confirm', 'Confirm Password'),\n                            spellCheck: 'false'\n                        })\n                    ),\n                    confirmError,\n                    _react2.default.createElement(\n                        'button',\n                        {\n                            type: 'submit',\n                            className: 'btn btn-primary'\n                        },\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'claim.ldap_to_email.switchTo',\n                            defaultMessage: 'Switch account to email/password'\n                        })\n                    ),\n                    serverError\n                );\n            }\n\n            return _react2.default.createElement(\n                'div',\n                null,\n                _react2.default.createElement(\n                    'h3',\n                    null,\n                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'claim.ldap_to_email.title',\n                        defaultMessage: 'Switch AD/LDAP Account to Email/Password'\n                    })\n                ),\n                content\n            );\n        }\n    }]);\n    return LDAPToEmail;\n}(_react2.default.Component);\n\nexports.default = LDAPToEmail;\n\n\nLDAPToEmail.defaultProps = {};\nLDAPToEmail.propTypes = {\n    email: _propTypes2.default.string\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(22)))\n\n/***/ }),\n\n/***/ 2520:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(239);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(238);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(242);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(240);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(241);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _propTypes = __webpack_require__(21);\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = __webpack_require__(13);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactIntl = __webpack_require__(697);\n\nvar _admin_actions = __webpack_require__(738);\n\nvar _user_actions = __webpack_require__(717);\n\nvar _utils = __webpack_require__(698);\n\nvar Utils = _interopRequireWildcard(_utils);\n\nvar _login_mfa = __webpack_require__(925);\n\nvar _login_mfa2 = _interopRequireDefault(_login_mfa);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar EmailToLDAP = function (_React$Component) {\n    (0, _inherits3.default)(EmailToLDAP, _React$Component);\n\n    function EmailToLDAP(props) {\n        (0, _classCallCheck3.default)(this, EmailToLDAP);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (EmailToLDAP.__proto__ || (0, _getPrototypeOf2.default)(EmailToLDAP)).call(this, props));\n\n        _this.submit = _this.submit.bind(_this);\n        _this.preSubmit = _this.preSubmit.bind(_this);\n\n        _this.state = {\n            passwordError: '',\n            ldapError: '',\n            ldapPasswordError: '',\n            serverError: '',\n            showMfa: false\n        };\n        return _this;\n    }\n\n    (0, _createClass3.default)(EmailToLDAP, [{\n        key: 'preSubmit',\n        value: function preSubmit(e) {\n            var _this2 = this;\n\n            e.preventDefault();\n\n            var state = {\n                passwordError: '',\n                ldapError: '',\n                ldapPasswordError: '',\n                serverError: ''\n            };\n\n            var password = this.refs.emailpassword.value;\n            if (!password) {\n                state.passwordError = Utils.localizeMessage('claim.email_to_ldap.pwdError', 'Please enter your password.');\n                this.setState(state);\n                return;\n            }\n\n            var ldapId = this.refs.ldapid.value.trim();\n            if (!ldapId) {\n                state.ldapError = Utils.localizeMessage('claim.email_to_ldap.ldapIdError', 'Please enter your AD/LDAP ID.');\n                this.setState(state);\n                return;\n            }\n\n            var ldapPassword = this.refs.ldappassword.value;\n            if (!ldapPassword) {\n                state.ldapPasswordError = Utils.localizeMessage('claim.email_to_ldap.ldapPasswordError', 'Please enter your AD/LDAP password.');\n                this.setState(state);\n                return;\n            }\n\n            state.password = password;\n            state.ldapId = ldapId;\n            state.ldapPassword = ldapPassword;\n            this.setState(state);\n\n            (0, _user_actions.checkMfa)(this.props.email, function (requiresMfa) {\n                if (requiresMfa) {\n                    _this2.setState({ showMfa: true });\n                } else {\n                    _this2.submit(_this2.props.email, password, '', ldapId, ldapPassword);\n                }\n            }, function (err) {\n                _this2.setState({ error: err.message });\n            });\n        }\n    }, {\n        key: 'submit',\n        value: function submit(loginId, password, token, ldapId, ldapPassword) {\n            var _this3 = this;\n\n            (0, _admin_actions.emailToLdap)(loginId, password, token, ldapId || this.state.ldapId, ldapPassword || this.state.ldapPassword, function (data) {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            }, function (err) {\n                switch (err.id) {\n                    case 'ent.ldap.do_login.user_not_registered.app_error':\n                    case 'ent.ldap.do_login.user_filtered.app_error':\n                    case 'ent.ldap.do_login.matched_to_many_users.app_error':\n                        _this3.setState({ ldapError: err.message, showMfa: false });\n                        break;\n                    case 'ent.ldap.do_login.invalid_password.app_error':\n                        _this3.setState({ ldapPasswordError: err.message, showMfa: false });\n                        break;\n                    case 'api.user.check_user_password.invalid.app_error':\n                        _this3.setState({ passwordError: err.message, showMfa: false });\n                        break;\n                    default:\n                        _this3.setState({ serverError: err.message, showMfa: false });\n                }\n            });\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var serverError = null;\n            var formClass = 'form-group';\n            if (this.state.serverError) {\n                serverError = _react2.default.createElement(\n                    'div',\n                    { className: 'form-group has-error' },\n                    _react2.default.createElement(\n                        'label',\n                        { className: 'control-label' },\n                        this.state.serverError\n                    )\n                );\n                formClass += ' has-error';\n            }\n\n            var passwordError = null;\n            var passwordClass = 'form-group';\n            if (this.state.passwordError) {\n                passwordError = _react2.default.createElement(\n                    'div',\n                    { className: 'form-group has-error' },\n                    _react2.default.createElement(\n                        'label',\n                        { className: 'control-label' },\n                        this.state.passwordError\n                    )\n                );\n                passwordClass += ' has-error';\n            }\n\n            var ldapError = null;\n            var ldapClass = 'form-group';\n            if (this.state.ldapError) {\n                ldapError = _react2.default.createElement(\n                    'div',\n                    { className: 'form-group has-error' },\n                    _react2.default.createElement(\n                        'label',\n                        { className: 'control-label' },\n                        this.state.ldapError\n                    )\n                );\n                ldapClass += ' has-error';\n            }\n\n            var ldapPasswordError = null;\n            var ldapPasswordClass = 'form-group';\n            if (this.state.ldapPasswordError) {\n                ldapPasswordError = _react2.default.createElement(\n                    'div',\n                    { className: 'form-group has-error' },\n                    _react2.default.createElement(\n                        'label',\n                        { className: 'control-label' },\n                        this.state.ldapPasswordError\n                    )\n                );\n                ldapPasswordClass += ' has-error';\n            }\n\n            var loginPlaceholder = void 0;\n            if (global.window.mm_config.LdapLoginFieldName) {\n                loginPlaceholder = global.window.mm_config.LdapLoginFieldName;\n            } else {\n                loginPlaceholder = Utils.localizeMessage('claim.email_to_ldap.ldapId', 'AD/LDAP ID');\n            }\n\n            var passwordPlaceholder = void 0;\n            if (global.window.mm_config.LdapPasswordFieldName) {\n                passwordPlaceholder = global.window.mm_config.LdapPasswordFieldName;\n            } else {\n                passwordPlaceholder = Utils.localizeMessage('claim.email_to_ldap.ldapPwd', 'AD/LDAP Password');\n            }\n\n            var content = void 0;\n            if (this.state.showMfa) {\n                content = _react2.default.createElement(_login_mfa2.default, {\n                    loginId: this.props.email,\n                    password: this.state.password,\n                    submit: this.submit\n                });\n            } else {\n                content = _react2.default.createElement(\n                    'form',\n                    {\n                        onSubmit: this.preSubmit,\n                        className: formClass\n                    },\n                    _react2.default.createElement(\n                        'p',\n                        null,\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'claim.email_to_ldap.ssoType',\n                            defaultMessage: 'Upon claiming your account, you will only be able to login with AD/LDAP'\n                        })\n                    ),\n                    _react2.default.createElement(\n                        'p',\n                        null,\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'claim.email_to_ldap.ssoNote',\n                            defaultMessage: 'You must already have a valid AD/LDAP account'\n                        })\n                    ),\n                    _react2.default.createElement(\n                        'p',\n                        null,\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'claim.email_to_ldap.enterPwd',\n                            defaultMessage: 'Enter the password for your {site} email account',\n                            values: {\n                                site: global.window.mm_config.SiteName\n                            }\n                        })\n                    ),\n                    _react2.default.createElement('input', {\n                        type: 'text',\n                        style: style.usernameInput,\n                        name: 'fakeusernameremembered'\n                    }),\n                    _react2.default.createElement(\n                        'div',\n                        { className: passwordClass },\n                        _react2.default.createElement('input', {\n                            type: 'password',\n                            className: 'form-control',\n                            name: 'emailPassword',\n                            ref: 'emailpassword',\n                            autoComplete: 'off',\n                            placeholder: Utils.localizeMessage('claim.email_to_ldap.pwd', 'Password'),\n                            spellCheck: 'false'\n                        })\n                    ),\n                    passwordError,\n                    _react2.default.createElement(\n                        'p',\n                        null,\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'claim.email_to_ldap.enterLdapPwd',\n                            defaultMessage: 'Enter the ID and password for your AD/LDAP account'\n                        })\n                    ),\n                    _react2.default.createElement(\n                        'div',\n                        { className: ldapClass },\n                        _react2.default.createElement('input', {\n                            type: 'text',\n                            className: 'form-control',\n                            name: 'ldapId',\n                            ref: 'ldapid',\n                            autoComplete: 'off',\n                            placeholder: loginPlaceholder,\n                            spellCheck: 'false'\n                        })\n                    ),\n                    ldapError,\n                    _react2.default.createElement(\n                        'div',\n                        { className: ldapPasswordClass },\n                        _react2.default.createElement('input', {\n                            type: 'password',\n                            className: 'form-control',\n                            name: 'ldapPassword',\n                            ref: 'ldappassword',\n                            autoComplete: 'off',\n                            placeholder: passwordPlaceholder,\n                            spellCheck: 'false'\n                        })\n                    ),\n                    ldapPasswordError,\n                    _react2.default.createElement(\n                        'button',\n                        {\n                            type: 'submit',\n                            className: 'btn btn-primary'\n                        },\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'claim.email_to_ldap.switchTo',\n                            defaultMessage: 'Switch account to AD/LDAP'\n                        })\n                    ),\n                    serverError\n                );\n            }\n\n            return _react2.default.createElement(\n                'div',\n                null,\n                _react2.default.createElement(\n                    'h3',\n                    null,\n                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'claim.email_to_ldap.title',\n                        defaultMessage: 'Switch Email/Password Account to AD/LDAP'\n                    })\n                ),\n                content\n            );\n        }\n    }]);\n    return EmailToLDAP;\n}(_react2.default.Component); // Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nexports.default = EmailToLDAP;\n\n\nEmailToLDAP.defaultProps = {};\nEmailToLDAP.propTypes = {\n    email: _propTypes2.default.string\n};\n\nvar style = {\n    usernameInput: { display: 'none' }\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(22)))\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 7.e4edf2d3f31281dc5577.js","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Route, Switch} from 'react-router-dom';\n\nimport logoImage from 'images/logo.png';\nimport BackButton from 'components/common/back_button.jsx';\nimport OauthToEmail from 'components/claim/components/oauth_to_email';\nimport EmailToOauth from 'components/claim/components/email_to_oauth';\nimport LdapToEmail from 'components/claim/components/ldap_to_email';\nimport EmailToLdap from 'components/claim/components/email_to_ldap';\n\nexport default class ClaimController extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n    }\n    componentWillMount() {\n        this.setState({\n            email: (new URLSearchParams(this.props.location.search)).get('email'),\n            newType: (new URLSearchParams(this.props.location.search)).get('new_type'),\n            currentType: (new URLSearchParams(this.props.location.search)).get('old_type')\n        });\n    }\n    render() {\n        return (\n            <div>\n                <BackButton/>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container'>\n                        <img\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div id='claim'>\n                            <Switch>\n                                <Route\n                                    path={`${this.props.match.url}/oauth_to_email`}\n                                    render={(props) => (\n                                        <OauthToEmail\n                                            {...this.state}\n                                            {...props}\n                                        />\n                                )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/email_to_oauth`}\n                                    render={(props) => (\n                                        <EmailToOauth\n                                            {...this.state}\n                                            {...props}\n                                        />\n                                )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/ldap_to_email`}\n                                    render={(props) => (\n                                        <LdapToEmail\n                                            {...this.state}\n                                            {...props}\n                                        />\n                                )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/email_to_ldap`}\n                                    render={(props) => (\n                                        <EmailToLdap\n                                            {...this.state}\n                                            {...props}\n                                        />\n                                )}\n                                />\n                            </Switch>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nClaimController.defaultProps = {\n};\nClaimController.propTypes = {\n    location: PropTypes.object.isRequired,\n    children: PropTypes.node\n};\n\n\n\n// WEBPACK FOOTER //\n// ./components/claim/claim_controller.jsx","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport {oauthToEmail} from 'actions/admin_actions.jsx';\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class OAuthToEmail extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.submit = this.submit.bind(this);\n\n        this.state = {};\n    }\n\n    submit(e) {\n        e.preventDefault();\n        const state = {};\n\n        const password = ReactDOM.findDOMNode(this.refs.password).value;\n        if (!password) {\n            state.error = Utils.localizeMessage('claim.oauth_to_email.enterPwd', 'Please enter a password.');\n            this.setState(state);\n            return;\n        }\n\n        const passwordErr = Utils.isValidPassword(password, Utils.getPasswordConfig());\n        if (passwordErr !== '') {\n            this.setState({\n                error: passwordErr\n            });\n            return;\n        }\n\n        const confirmPassword = ReactDOM.findDOMNode(this.refs.passwordconfirm).value;\n        if (!confirmPassword || password !== confirmPassword) {\n            state.error = Utils.localizeMessage('claim.oauth_to_email.pwdNotMatch', 'Password do not match.');\n            this.setState(state);\n            return;\n        }\n\n        state.error = null;\n        this.setState(state);\n\n        oauthToEmail(\n            this.props.currentType,\n            this.props.email,\n            password,\n            null,\n            (err) => {\n                this.setState({error: err.message});\n            }\n        );\n    }\n    render() {\n        var error = null;\n        if (this.state.error) {\n            error = <div className='form-group has-error'><label className='control-label'>{this.state.error}</label></div>;\n        }\n\n        var formClass = 'form-group';\n        if (error) {\n            formClass += ' has-error';\n        }\n\n        const uiType = `${(this.props.currentType === Constants.SAML_SERVICE ? Constants.SAML_SERVICE.toUpperCase() : Utils.toTitleCase(this.props.currentType))} SSO`;\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.oauth_to_email.title'\n                        defaultMessage='Switch {type} Account to Email'\n                        values={{\n                            type: uiType\n                        }}\n                    />\n                </h3>\n                <form onSubmit={this.submit}>\n                    <p>\n                        <FormattedMessage\n                            id='claim.oauth_to_email.description'\n                            defaultMessage='Upon changing your account type, you will only be able to login with your email and password.'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.oauth_to_email.enterNewPwd'\n                            defaultMessage='Enter a new password for your {site} email account'\n                            values={{\n                                site: global.window.mm_config.SiteName\n                            }}\n                        />\n                    </p>\n                    <div className={formClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref='password'\n                            placeholder={Utils.localizeMessage('claim.oauth_to_email.newPwd', 'New Password')}\n                            spellCheck='false'\n                        />\n                    </div>\n                    <div className={formClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='passwordconfirm'\n                            ref='passwordconfirm'\n                            placeholder={Utils.localizeMessage('claim.oauth_to_email.confirm', 'Confirm Password')}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {error}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.oauth_to_email.switchTo'\n                            defaultMessage='Switch {type} to email and password'\n                            values={{\n                                type: uiType\n                            }}\n                        />\n                    </button>\n                </form>\n            </div>\n        );\n    }\n}\n\nOAuthToEmail.defaultProps = {\n};\nOAuthToEmail.propTypes = {\n    currentType: PropTypes.string,\n    email: PropTypes.string\n};\n\n\n\n// WEBPACK FOOTER //\n// ./components/claim/components/oauth_to_email.jsx","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport {emailToOAuth} from 'actions/admin_actions.jsx';\nimport {checkMfa} from 'actions/user_actions.jsx';\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport LoginMfa from 'components/login/components/login_mfa.jsx';\n\nexport default class EmailToOAuth extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.submit = this.submit.bind(this);\n        this.preSubmit = this.preSubmit.bind(this);\n\n        this.state = {showMfa: false, password: ''};\n    }\n\n    preSubmit(e) {\n        e.preventDefault();\n        var state = {};\n\n        var password = ReactDOM.findDOMNode(this.refs.password).value;\n        if (!password) {\n            state.error = Utils.localizeMessage('claim.email_to_oauth.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        this.setState({password});\n\n        state.error = null;\n        this.setState(state);\n\n        checkMfa(\n            this.props.email,\n            (requiresMfa) => {\n                if (requiresMfa) {\n                    this.setState({showMfa: true});\n                } else {\n                    this.submit(this.props.email, password, '');\n                }\n            },\n            (err) => {\n                this.setState({error: err.message});\n            }\n        );\n    }\n\n    submit(loginId, password, token) {\n        emailToOAuth(\n            loginId,\n            password,\n            token,\n            this.props.newType,\n            (data) => {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            },\n            (err) => {\n                this.setState({error: err.message, showMfa: false});\n            }\n        );\n    }\n\n    render() {\n        var error = null;\n        if (this.state.error) {\n            error = <div className='form-group has-error'><label className='control-label'>{this.state.error}</label></div>;\n        }\n\n        var formClass = 'form-group';\n        if (error) {\n            formClass += ' has-error';\n        }\n\n        const type = (this.props.newType === Constants.SAML_SERVICE ? Constants.SAML_SERVICE.toUpperCase() : Utils.toTitleCase(this.props.newType));\n        const uiType = `${type} SSO`;\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <form onSubmit={this.preSubmit}>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_oauth.ssoType'\n                            defaultMessage='Upon claiming your account, you will only be able to login with {type} SSO'\n                            values={{\n                                type\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_oauth.ssoNote'\n                            defaultMessage='You must already have a valid {type} account'\n                            values={{\n                                type\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_oauth.enterPwd'\n                            defaultMessage='Enter the password for your {site} account'\n                            values={{\n                                site: global.window.mm_config.SiteName\n                            }}\n                        />\n                    </p>\n                    <div className={formClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref='password'\n                            placeholder={Utils.localizeMessage('claim.email_to_oauth.pwd', 'Password')}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {error}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.email_to_oauth.switchTo'\n                            defaultMessage='Switch account to {uiType}'\n                            values={{\n                                uiType\n                            }}\n                        />\n                    </button>\n                </form>\n            );\n        }\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.email_to_oauth.title'\n                        defaultMessage='Switch Email/Password Account to {uiType}'\n                        values={{\n                            uiType\n                        }}\n                    />\n                </h3>\n                {content}\n            </div>\n        );\n    }\n}\n\nEmailToOAuth.defaultProps = {\n};\nEmailToOAuth.propTypes = {\n    newType: PropTypes.string,\n    email: PropTypes.string\n};\n\n\n\n// WEBPACK FOOTER //\n// ./components/claim/components/email_to_oauth.jsx","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {checkMfa, switchFromLdapToEmail} from 'actions/user_actions.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport LoginMfa from 'components/login/components/login_mfa.jsx';\n\nexport default class LDAPToEmail extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.submit = this.submit.bind(this);\n        this.preSubmit = this.preSubmit.bind(this);\n\n        this.state = {\n            passwordError: '',\n            confirmError: '',\n            ldapPasswordError: '',\n            serverError: ''\n        };\n    }\n\n    preSubmit(e) {\n        e.preventDefault();\n\n        var state = {\n            passwordError: '',\n            confirmError: '',\n            ldapPasswordError: '',\n            serverError: ''\n        };\n\n        const ldapPassword = this.refs.ldappassword.value;\n        if (!ldapPassword) {\n            state.ldapPasswordError = Utils.localizeMessage('claim.ldap_to_email.ldapPasswordError', 'Please enter your AD/LDAP password.');\n            this.setState(state);\n            return;\n        }\n\n        const password = this.refs.password.value;\n        if (!password) {\n            state.passwordError = Utils.localizeMessage('claim.ldap_to_email.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        const passwordErr = Utils.isValidPassword(password, Utils.getPasswordConfig());\n        if (passwordErr !== '') {\n            this.setState({\n                passwordError: passwordErr\n            });\n            return;\n        }\n\n        const confirmPassword = this.refs.passwordconfirm.value;\n        if (!confirmPassword || password !== confirmPassword) {\n            state.confirmError = Utils.localizeMessage('claim.ldap_to_email.pwdNotMatch', 'Passwords do not match.');\n            this.setState(state);\n            return;\n        }\n\n        state.password = password;\n        state.ldapPassword = ldapPassword;\n        this.setState(state);\n\n        checkMfa(\n            this.props.email,\n            (requiresMfa) => {\n                if (requiresMfa) {\n                    this.setState({showMfa: true});\n                } else {\n                    this.submit(this.props.email, password, '', ldapPassword);\n                }\n            },\n            (err) => {\n                this.setState({error: err.message});\n            }\n        );\n    }\n\n    submit(loginId, password, token, ldapPassword) {\n        switchFromLdapToEmail(\n            this.props.email,\n            password,\n            token,\n            ldapPassword || this.state.ldapPassword,\n            (data) => {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            },\n            (err) => {\n                if (err.id.startsWith('model.user.is_valid.pwd')) {\n                    this.setState({passwordError: err.message, showMfa: false});\n                } else {\n                    switch (err.id) {\n                    case 'ent.ldap.do_login.invalid_password.app_error':\n                        this.setState({ldapPasswordError: err.message, showMfa: false});\n                        break;\n                    default:\n                        this.setState({serverError: err.message, showMfa: false});\n                    }\n                }\n            }\n        );\n    }\n\n    render() {\n        let serverError = null;\n        let formClass = 'form-group';\n        if (this.state.serverError) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\n            formClass += ' has-error';\n        }\n\n        let passwordError = null;\n        let passwordClass = 'form-group';\n        if (this.state.passwordError) {\n            passwordError = <div className='form-group has-error'><label className='control-label'>{this.state.passwordError}</label></div>;\n            passwordClass += ' has-error';\n        }\n\n        let ldapPasswordError = null;\n        let ldapPasswordClass = 'form-group';\n        if (this.state.ldapPasswordError) {\n            ldapPasswordError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapPasswordError}</label></div>;\n            ldapPasswordClass += ' has-error';\n        }\n\n        let confirmError = null;\n        let confimClass = 'form-group';\n        if (this.state.confirmError) {\n            confirmError = <div className='form-group has-error'><label className='control-label'>{this.state.confirmError}</label></div>;\n            confimClass += ' has-error';\n        }\n\n        let passwordPlaceholder;\n        if (global.window.mm_config.LdapPasswordFieldName) {\n            passwordPlaceholder = global.window.mm_config.LdapPasswordFieldName;\n        } else {\n            passwordPlaceholder = Utils.localizeMessage('claim.ldap_to_email.ldapPwd', 'AD/LDAP Password');\n        }\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <form\n                    onSubmit={this.preSubmit}\n                    className={formClass}\n                >\n                    <p>\n                        <FormattedMessage\n                            id='claim.ldap_to_email.email'\n                            defaultMessage='After switching your authentication method, you will use {email} to login. Your AD/LDAP credentials will no longer allow access to Mattermost.'\n                            values={{\n                                email: this.props.email\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.ldap_to_email.enterLdapPwd'\n                            defaultMessage='{ldapPassword}:'\n                            values={{\n                                ldapPassword: passwordPlaceholder\n                            }}\n                        />\n                    </p>\n                    <div className={ldapPasswordClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='ldapPassword'\n                            ref='ldappassword'\n                            placeholder={passwordPlaceholder}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapPasswordError}\n                    <p>\n                        <FormattedMessage\n                            id='claim.ldap_to_email.enterPwd'\n                            defaultMessage='New email login password:'\n                        />\n                    </p>\n                    <div className={passwordClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref='password'\n                            placeholder={Utils.localizeMessage('claim.ldap_to_email.pwd', 'Password')}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {passwordError}\n                    <div className={confimClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='passwordconfirm'\n                            ref='passwordconfirm'\n                            placeholder={Utils.localizeMessage('claim.ldap_to_email.confirm', 'Confirm Password')}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {confirmError}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.ldap_to_email.switchTo'\n                            defaultMessage='Switch account to email/password'\n                        />\n                    </button>\n                    {serverError}\n                </form>\n            );\n        }\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.ldap_to_email.title'\n                        defaultMessage='Switch AD/LDAP Account to Email/Password'\n                    />\n                </h3>\n                {content}\n            </div>\n        );\n    }\n}\n\nLDAPToEmail.defaultProps = {\n};\nLDAPToEmail.propTypes = {\n    email: PropTypes.string\n};\n\n\n\n// WEBPACK FOOTER //\n// ./components/claim/components/ldap_to_email.jsx","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {emailToLdap} from 'actions/admin_actions.jsx';\nimport {checkMfa} from 'actions/user_actions.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport LoginMfa from 'components/login/components/login_mfa.jsx';\n\nexport default class EmailToLDAP extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.submit = this.submit.bind(this);\n        this.preSubmit = this.preSubmit.bind(this);\n\n        this.state = {\n            passwordError: '',\n            ldapError: '',\n            ldapPasswordError: '',\n            serverError: '',\n            showMfa: false\n        };\n    }\n\n    preSubmit(e) {\n        e.preventDefault();\n\n        var state = {\n            passwordError: '',\n            ldapError: '',\n            ldapPasswordError: '',\n            serverError: ''\n        };\n\n        const password = this.refs.emailpassword.value;\n        if (!password) {\n            state.passwordError = Utils.localizeMessage('claim.email_to_ldap.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        const ldapId = this.refs.ldapid.value.trim();\n        if (!ldapId) {\n            state.ldapError = Utils.localizeMessage('claim.email_to_ldap.ldapIdError', 'Please enter your AD/LDAP ID.');\n            this.setState(state);\n            return;\n        }\n\n        const ldapPassword = this.refs.ldappassword.value;\n        if (!ldapPassword) {\n            state.ldapPasswordError = Utils.localizeMessage('claim.email_to_ldap.ldapPasswordError', 'Please enter your AD/LDAP password.');\n            this.setState(state);\n            return;\n        }\n\n        state.password = password;\n        state.ldapId = ldapId;\n        state.ldapPassword = ldapPassword;\n        this.setState(state);\n\n        checkMfa(\n            this.props.email,\n            (requiresMfa) => {\n                if (requiresMfa) {\n                    this.setState({showMfa: true});\n                } else {\n                    this.submit(this.props.email, password, '', ldapId, ldapPassword);\n                }\n            },\n            (err) => {\n                this.setState({error: err.message});\n            }\n        );\n    }\n\n    submit(loginId, password, token, ldapId, ldapPassword) {\n        emailToLdap(\n            loginId,\n            password,\n            token,\n            ldapId || this.state.ldapId,\n            ldapPassword || this.state.ldapPassword,\n            (data) => {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            },\n            (err) => {\n                switch (err.id) {\n                case 'ent.ldap.do_login.user_not_registered.app_error':\n                case 'ent.ldap.do_login.user_filtered.app_error':\n                case 'ent.ldap.do_login.matched_to_many_users.app_error':\n                    this.setState({ldapError: err.message, showMfa: false});\n                    break;\n                case 'ent.ldap.do_login.invalid_password.app_error':\n                    this.setState({ldapPasswordError: err.message, showMfa: false});\n                    break;\n                case 'api.user.check_user_password.invalid.app_error':\n                    this.setState({passwordError: err.message, showMfa: false});\n                    break;\n                default:\n                    this.setState({serverError: err.message, showMfa: false});\n                }\n            }\n        );\n    }\n\n    render() {\n        let serverError = null;\n        let formClass = 'form-group';\n        if (this.state.serverError) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\n            formClass += ' has-error';\n        }\n\n        let passwordError = null;\n        let passwordClass = 'form-group';\n        if (this.state.passwordError) {\n            passwordError = <div className='form-group has-error'><label className='control-label'>{this.state.passwordError}</label></div>;\n            passwordClass += ' has-error';\n        }\n\n        let ldapError = null;\n        let ldapClass = 'form-group';\n        if (this.state.ldapError) {\n            ldapError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapError}</label></div>;\n            ldapClass += ' has-error';\n        }\n\n        let ldapPasswordError = null;\n        let ldapPasswordClass = 'form-group';\n        if (this.state.ldapPasswordError) {\n            ldapPasswordError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapPasswordError}</label></div>;\n            ldapPasswordClass += ' has-error';\n        }\n\n        let loginPlaceholder;\n        if (global.window.mm_config.LdapLoginFieldName) {\n            loginPlaceholder = global.window.mm_config.LdapLoginFieldName;\n        } else {\n            loginPlaceholder = Utils.localizeMessage('claim.email_to_ldap.ldapId', 'AD/LDAP ID');\n        }\n\n        let passwordPlaceholder;\n        if (global.window.mm_config.LdapPasswordFieldName) {\n            passwordPlaceholder = global.window.mm_config.LdapPasswordFieldName;\n        } else {\n            passwordPlaceholder = Utils.localizeMessage('claim.email_to_ldap.ldapPwd', 'AD/LDAP Password');\n        }\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <form\n                    onSubmit={this.preSubmit}\n                    className={formClass}\n                >\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.ssoType'\n                            defaultMessage='Upon claiming your account, you will only be able to login with AD/LDAP'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.ssoNote'\n                            defaultMessage='You must already have a valid AD/LDAP account'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.enterPwd'\n                            defaultMessage='Enter the password for your {site} email account'\n                            values={{\n                                site: global.window.mm_config.SiteName\n                            }}\n                        />\n                    </p>\n                    <input\n                        type='text'\n                        style={style.usernameInput}\n                        name='fakeusernameremembered'\n                    />\n                    <div className={passwordClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='emailPassword'\n                            ref='emailpassword'\n                            autoComplete='off'\n                            placeholder={Utils.localizeMessage('claim.email_to_ldap.pwd', 'Password')}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {passwordError}\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.enterLdapPwd'\n                            defaultMessage='Enter the ID and password for your AD/LDAP account'\n                        />\n                    </p>\n                    <div className={ldapClass}>\n                        <input\n                            type='text'\n                            className='form-control'\n                            name='ldapId'\n                            ref='ldapid'\n                            autoComplete='off'\n                            placeholder={loginPlaceholder}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapError}\n                    <div className={ldapPasswordClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='ldapPassword'\n                            ref='ldappassword'\n                            autoComplete='off'\n                            placeholder={passwordPlaceholder}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapPasswordError}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.email_to_ldap.switchTo'\n                            defaultMessage='Switch account to AD/LDAP'\n                        />\n                    </button>\n                    {serverError}\n                </form>\n            );\n        }\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.email_to_ldap.title'\n                        defaultMessage='Switch Email/Password Account to AD/LDAP'\n                    />\n                </h3>\n                {content}\n            </div>\n        );\n    }\n}\n\nEmailToLDAP.defaultProps = {\n};\nEmailToLDAP.propTypes = {\n    email: PropTypes.string\n};\n\nconst style = {\n    usernameInput: {display: 'none'}\n};\n\n\n\n// WEBPACK FOOTER //\n// ./components/claim/components/email_to_ldap.jsx"],"sourceRoot":""}