{"version":3,"sources":["webpack:///25.aa1c47a4a15683f62ac4.js","webpack:///./components/login/login_controller.jsx"],"names":["webpackJsonp","2285","module","exports","__webpack_require__","global","_interopRequireWildcard","obj","__esModule","newObj","key","Object","prototype","hasOwnProperty","call","default","_interopRequireDefault","defineProperty","value","_getPrototypeOf","_getPrototypeOf2","_classCallCheck2","_classCallCheck3","_possibleConstructorReturn2","_possibleConstructorReturn3","_createClass2","_createClass3","_inherits2","_inherits3","_propTypes","_propTypes2","_react","_react2","_reactIntl","_reactRouterDom","_client","_browser_history","_global_actions","GlobalActions","_team_actions","_user_actions","_browser_store","_browser_store2","_user_store","_user_store2","_team_store","_team_store2","_constants","_constants2","_text_formatting","TextFormatting","_utils","Utils","_post_utils","_logo","_logo2","_announcement_bar","_announcement_bar2","_form_error","_form_error2","_login_mfa","_login_mfa2","LoginController","_React$Component","props","this","_this","__proto__","preSubmit","bind","submit","finishSignin","handleLoginIdChange","handlePasswordChange","loginId","URLSearchParams","location","search","get","SIGNIN_VERIFIED","state","ldapEnabled","window","mm_license","IsLicensed","mm_config","EnableLdap","usernameSigninEnabled","EnableSignInWithUsername","emailSigninEnabled","EnableSignInWithEmail","samlEnabled","EnableSaml","password","showMfa","loading","object","isRequired","document","title","SiteName","removeGlobalItem","experimentalPrimaryTeam","ExperimentalPrimaryTeam","primaryTeam","getByName","getCurrentUser","browserHistory","push","name","DEFAULT_CHANNEL","redirectUserToDefaultTeam","refs","focus","e","_this2","preventDefault","newQuery","replace","pathname","hash","setState","trim","toLowerCase","msgId","serverError","createElement","FormattedMessage","id","values","ldapUsername","LdapLoginFieldName","localizeMessage","defaultMessage","checkMfa","requiresMfa","err","message","token","_this3","webLogin","params","data","inviteId","addUserToTeamFromInvite","team","encodeURIComponent","query","redirectTo","loadCurrentLocale","match","target","CustomBrand","EnableCustomBrand","text","CustomBrandText","formattedText","formatText","src","Client4","getBrandImageUrl","messageHtmlToComponent","mentions","loginPlaceholders","length","slice","join","EnableSignUpWithEmail","EnableSignUpWithGitLab","EnableSignUpWithOffice365","EnableSignUpWithGoogle","extraParam","extraBox","SIGNIN_CHANGE","className","SESSION_EXPIRED","PASSWORD_CHANGE","loginControls","gitlabSigninEnabled","googleSigninEnabled","office365SigninEnabled","samlSigninEnabled","errorClass","loginButton","onSubmit","error","margin","ref","onChange","placeholder","createLoginPlaceholder","spellCheck","autoCapitalize","type","EnableOpenServer","checkSignUpEnabled","Link","to","href","getOAuthRoute","SamlLoginButtonText","content","customContent","customClass","createLoginOptions","createCustomLogin","description","CustomDescriptionText","Component"],"mappings":"AAAAA,cAAc,KAERC,KACA,SAAUC,EAAQC,EAASC,GAEjC,cAC4B,SAASC,GA4FrC,QAASC,GAAwBC,GAAO,GAAIA,GAAOA,EAAIC,WAAc,MAAOD,EAAc,IAAIE,KAAa,IAAW,MAAPF,EAAe,IAAK,GAAIG,KAAOH,GAAWI,OAAOC,UAAUC,eAAeC,KAAKP,EAAKG,KAAMD,EAAOC,GAAOH,EAAIG,GAAgC,OAAtBD,GAAOM,QAAUR,EAAYE,EAElQ,QAASO,GAAuBT,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQQ,QAASR,GA5FvFI,OAAOM,eAAed,EAAS,cAC3Be,OAAO,GAGX,IAAIC,GAAkBf,EAAoB,KAEtCgB,EAAmBJ,EAAuBG,GAE1CE,EAAmBjB,EAAoB,KAEvCkB,EAAmBN,EAAuBK,GAE1CE,EAA8BnB,EAAoB,KAElDoB,EAA8BR,EAAuBO,GAErDE,EAAgBrB,EAAoB,KAEpCsB,EAAgBV,EAAuBS,GAEvCE,EAAavB,EAAoB,KAEjCwB,EAAaZ,EAAuBW,GC3BxCE,EAAAzB,EAAA,ID+BI0B,EAAcd,EAAuBa,GC9BzCE,EAAA3B,EAAA,IDkCI4B,EAAUhB,EAAuBe,GCjCrCE,EAAA7B,EAAA,KACA8B,EAAA9B,EAAA,KACA+B,EAAA/B,EAAA,KAEAgC,EAAAhC,EAAA,KACAiC,EAAAjC,EAAA,KAAYkC,EDwCQhC,EAAwB+B,GCvC5CE,EAAAnC,EAAA,KACAoC,EAAApC,EAAA,KACAqC,EAAArC,EAAA,KD6CIsC,EAAkB1B,EAAuByB,GC5C7CE,EAAAvC,EAAA,KDgDIwC,EAAe5B,EAAuB2B,GC/C1CE,EAAAzC,EAAA,KDmDI0C,EAAe9B,EAAuB6B,GClD1CE,EAAA3C,EAAA,IDsDI4C,EAAchC,EAAuB+B,GCrDzCE,EAAA7C,EAAA,KAAY8C,EDyDS5C,EAAwB2C,GCxD7CE,EAAA/C,EAAA,KAAYgD,ED4DA9C,EAAwB6C,GC3DpCE,EAAAjD,EAAA,KACAkD,EAAAlD,EAAA,KDgEImD,EAASvC,EAAuBsC,GC/DpCE,EAAApD,EAAA,KDmEIqD,EAAqBzC,EAAuBwC,GClEhDE,EAAAtD,EAAA,KDsEIuD,EAAe3C,EAAuB0C,GCpE1CE,EAAAxD,EAAA,KDwEIyD,EAAc7C,EAAuB4C,GCtEpBE,ED+EC,SAAUC,GCxE5B,QAAAD,GAAYE,IAAO,EAAA1C,EAAAP,SAAAkD,KAAAH,EAAA,IAAAI,IAAA,EAAA1C,EAAAT,SAAAkD,MAAAH,EAAAK,YAAA,EAAA/C,EAAAL,SAAA+C,IAAAhD,KAAAmD,KACTD,GAENE,GAAKE,UAAYF,EAAKE,UAAUC,KAAfH,GACjBA,EAAKI,OAASJ,EAAKI,OAAOD,KAAZH,GACdA,EAAKK,aAAeL,EAAKK,aAAaF,KAAlBH,GAEpBA,EAAKM,oBAAsBN,EAAKM,oBAAoBH,KAAzBH,GAC3BA,EAAKO,qBAAuBP,EAAKO,qBAAqBJ,KAA1BH,EAE5B,IAAIQ,GAAU,EAVC,OAWV,IAAIC,iBAAgBT,EAAKF,MAAMY,SAASC,QAASC,IAAI,WAAa9B,EAAAjC,QAAUgE,iBAAoB,GAAIJ,iBAAgBT,EAAKF,MAAMY,SAASC,QAASC,IAAI,WACtJJ,EAAW,GAAIC,iBAAgBT,EAAKF,MAAMY,SAASC,QAASC,IAAI,UAGpEZ,EAAKc,OACDC,YAAqD,SAAxC5E,EAAO6E,OAAOC,WAAWC,YAAgE,SAAvC/E,EAAO6E,OAAOG,UAAUC,WACvFC,sBAA4E,SAArDlF,EAAO6E,OAAOG,UAAUG,yBAC/CC,mBAAsE,SAAlDpF,EAAO6E,OAAOG,UAAUK,sBAC5CC,YAAqD,SAAxCtF,EAAO6E,OAAOC,WAAWC,YAAgE,SAAvC/E,EAAO6E,OAAOG,UAAUO,WACvFlB,UACAmB,SAAU,GACVC,SAAS,EACTC,SAAS,GAvBE7B,EDouBnB,OA3pBA,EAAItC,EAAWb,SAAS+C,EAAiBC,IACzC,EAAIrC,EAAcX,SAAS+C,EAAiB,OACxCpD,IAAK,YACLoE,IAAK,WCjFL,OACIF,SAAU9C,EAAAf,QAAUiF,OAAOC,iBDqHnC,EAAIvE,EAAcX,SAAS+C,IACvBpD,IAAK,oBACLQ,MAAO,WCvFPgF,SAASC,MAAQ9F,EAAO6E,OAAOG,UAAUe,SACzC1D,EAAA3B,QAAasF,iBAAiB,OAC9B,IAAMC,GAA0BjG,EAAOgF,UAAUkB,wBAC3CC,EAAc1D,EAAA/B,QAAU0F,UAAUH,EACpC1D,GAAA7B,QAAU2F,kBAAoBF,EAC9BpE,EAAAuE,eAAeC,KAAf,IAAwBJ,EAAYK,KAApC,aAAqD7D,EAAAjC,QAAU+F,iBACxDlE,EAAA7B,QAAU2F,kBACjBpE,EAAcyE,4BAGb,GAAIpC,iBAAgBV,KAAKD,MAAMY,SAASC,QAASC,IAAI,WAAa9B,EAAAjC,QAAUgE,iBAAoB,GAAIJ,iBAAgBV,KAAKD,MAAMY,SAASC,QAASC,IAAI,UACtJb,KAAK+C,KAAKnB,SAASoB,WD4FvBvG,IAAK,YACLQ,MAAO,SCzFDgG,GAAG,GAAAC,GAAAlD,IACTiD,GAAEE,gBADO,IAGFxC,GAAYX,KAAKD,MAAjBY,SACDyC,EAAWzC,EAASC,OAAOyC,QAAQ,6BAA8B,GACnED,KAAazC,EAASC,QACtBzC,EAAAuE,eAAeW,QAAf,GAA0B1C,EAAS2C,SAAWF,EAAWzC,EAAS4C,KAKtE,IAAI9C,GAAUT,KAAK+C,KAAKtC,QAAQxD,KAC5BwD,KAAYT,KAAKe,MAAMN,SACvBT,KAAKwD,UAAU/C,WAGnB,IAAMmB,GAAW5B,KAAK+C,KAAKnB,SAAS3E,KAQpC,IAPI2E,IAAa5B,KAAKe,MAAMa,UACxB5B,KAAKwD,UAAU5B,eAInBnB,EAAUA,EAAQgD,OAAOC,eAEX,CAEV,GAAIC,GAAQ,UAqBZ,OApBI3D,MAAKe,MAAMS,qBACXmC,GAAS,SAET3D,KAAKe,MAAMO,wBACXqC,GAAS,YAET3D,KAAKe,MAAMC,cACX2C,GAAS,oBAGb3D,MAAKwD,UACDI,YACI7F,EAAAjB,QAAA+G,cAAA7F,EAAA8F,kBACIC,GAAIJ,EACJK,QACIC,aAAc7H,EAAO6E,OAAOG,UAAU8C,oBAAsB/E,EAAMgF,gBAAgB,0BAA2B,yBAQjI,IAAKvC,EASD,WARA5B,MAAKwD,UACDI,YACI7F,EAAAjB,QAAA+G,cAAA7F,EAAA8F,kBACIC,GAAG,mBACHK,eAAe,kCAO/B,EAAA7F,EAAA8F,UACI5D,EACA,SAAC6D,GACOA,EACApB,EAAKM,UAAU3B,SAAS,IAExBqB,EAAK7C,OAAOI,EAASmB,EAAU,KAGvC,SAAC2C,GACGrB,EAAKM,UAAUI,YAAaW,EAAIC,eDyFxC/H,IAAK,SACLQ,MAAO,SCrFJwD,EAASmB,EAAU6C,GAAO,GAAAC,GAAA1E,IAC7BA,MAAKwD,UAAUI,YAAa,KAAM9B,SAAS,KAE3C,EAAAvD,EAAAoG,UACIlE,EACAmB,EACA6C,EACA,WAEI,GAAMG,GAAS,GAAIlE,iBAAgBgE,EAAK3E,MAAMY,SAASC,QACjD2C,EAAOqB,EAAO/D,IAAI,MAAQ,GAC1BgE,EAAOD,EAAO/D,IAAI,MAAQ,GAC1BiE,EAAWF,EAAO/D,IAAI,OAAS,EAErC,IAAIiE,GAAYvB,EAcZ,YAbA,EAAAjF,EAAAyG,yBACIF,EACAtB,EACAuB,EACA,SAACE,GACGN,EAAKpE,aAAa0E,IAEtB,WAEIN,EAAKpE,gBAOjBoE,GAAKpE,gBAET,SAACiE,GACkB,0CAAXA,EAAIR,GACJ5F,EAAAuE,eAAeC,KAAK,+BAAiCsC,mBAAmBxE,IACtD,2CAAX8D,EAAIR,IACA,oDAAXQ,EAAIR,GACJW,EAAKlB,UACD3B,SAAS,EACTC,SAAS,EACT8B,YACI7F,EAAAjB,QAAA+G,cAAA7F,EAAA8F,kBACIC,GAAG,qBACHK,eAAe,mEAIT,mDAAXG,EAAIR,IAAsE,iDAAXQ,EAAIR,GAC1EW,EAAKlB,UACD3B,SAAS,EACTC,SAAS,EACT8B,YACI7F,EAAAjB,QAAA+G,cAAA7F,EAAA8F,kBACIC,GAAG,wBACHK,eAAe,kCAK3BM,EAAKlB,UAAU3B,SAAS,EAAO+B,YAAaW,EAAIC,QAAS1C,SAAS,SD4E9ErF,IAAK,eACLQ,MAAO,SCvEE+H,GACT,GAAM3C,GAA0BjG,EAAOgF,UAAUkB,wBAC3CC,EAAc1D,EAAA/B,QAAU0F,UAAUH,GAClC6C,EAAQ,GAAIxE,iBAAgBV,KAAKD,MAAMY,SAASC,QAChDuE,EAAaD,EAAMrE,IAAI,cAE7BxC,GAAc+G,oBACVD,GAAcA,EAAWE,MAAM,gBAC/BlH,EAAAuE,eAAeC,KAAKwC,GACbH,EACP7G,EAAAuE,eAAeC,KAAf,IAAwBqC,EAAKpC,MACtBL,EACPpE,EAAAuE,eAAeC,KAAf,IAAwBJ,EAAYK,KAApC,aAAqD7D,EAAAjC,QAAU+F,iBAE/DxE,EAAcyE,+BD2ElBrG,IAAK,sBACLQ,MAAO,SCxESgG,GAChBjD,KAAKwD,UACD/C,QAASwC,EAAEqC,OAAOrI,WD4EtBR,IAAK,uBACLQ,MAAO,SCzEUgG,GACjBjD,KAAKwD,UACD5B,SAAUqB,EAAEqC,OAAOrI,WD6EvBR,IAAK,oBACLQ,MAAO,WCzEP,GAA4C,SAAxCb,EAAO6E,OAAOC,WAAWC,YACoB,SAAzC/E,EAAO6E,OAAOC,WAAWqE,aACqB,SAA9CnJ,EAAO6E,OAAOG,UAAUoE,kBAA8B,CAC1D,GAAMC,GAAOrJ,EAAO6E,OAAOG,UAAUsE,iBAAmB,GAClDC,EAAgB1G,EAAe2G,WAAWH,EAEhD,OACI1H,GAAAjB,QAAA+G,cAAA,WACI9F,EAAAjB,QAAA+G,cAAA,OACIgC,IAAK3H,EAAA4H,QAAQC,iBAAiB,KAElChI,EAAAjB,QAAA+G,cAAA,UACK,EAAAzE,EAAA4G,wBAAuBL,GAAe,GAAQM,UAAU,MAMzE,MAAO,SD6EPxJ,IAAK,yBACLQ,MAAO,WC1EP,GAAM+D,GAAchB,KAAKe,MAAMC,YACzBM,EAAwBtB,KAAKe,MAAMO,sBACnCE,EAAqBxB,KAAKe,MAAMS,mBAEhC0E,IAiBN,OAhBI1E,IACA0E,EAAkBvD,KAAKxD,EAAMgF,gBAAgB,cAAe,UAG5D7C,GACA4E,EAAkBvD,KAAKxD,EAAMgF,gBAAgB,iBAAkB,aAG/DnD,IACI5E,EAAO6E,OAAOG,UAAU8C,mBACxBgC,EAAkBvD,KAAKvG,EAAO6E,OAAOG,UAAU8C,oBAE/CgC,EAAkBvD,KAAKxD,EAAMgF,gBAAgB,qBAAsB,sBAIvE+B,EAAkBC,QAAU,EACrBD,EAAkBE,MAAM,EAAGF,EAAkBC,OAAS,GAAGE,KAAK,MACjElH,EAAMgF,gBAAgB,sBAAuB,QAC7C+B,EAAkBA,EAAkBC,OAAS,GACb,IAA7BD,EAAkBC,OAClBD,EAAkB,GAGtB,MD4EPzJ,IAAK,qBACLQ,MAAO,WCzEP,MAAyD,SAAlDb,EAAO6E,OAAOG,UAAUkF,uBACwB,SAAnDlK,EAAO6E,OAAOG,UAAUmF,wBAC8B,SAAtDnK,EAAO6E,OAAOG,UAAUoF,2BAC2B,SAAnDpK,EAAO6E,OAAOG,UAAUqF,wBACe,SAAvCrK,EAAO6E,OAAOG,UAAUC,YACe,SAAvCjF,EAAO6E,OAAOG,UAAUO,cDwE5BlF,IAAK,qBACLQ,MAAO,WCrEP,GAAMyJ,GAAc,GAAIhG,iBAAgBV,KAAKD,MAAMY,SAASC,QAASC,IAAI,SACrE8F,EAAW,EACXD,KACIA,IAAe3H,EAAAjC,QAAU8J,cACzBD,EACI5I,EAAAjB,QAAA+G,cAAA,OAAKgD,UAAU,uBACX9I,EAAAjB,QAAA+G,cAAA,KAAGgD,UAAU,gBACb9I,EAAAjB,QAAA+G,cAAA7F,EAAA8F,kBACIC,GAAG,gBACHK,eAAe,0CAIpBsC,IAAe3H,EAAAjC,QAAUgE,gBAChC6F,EACI5I,EAAAjB,QAAA+G,cAAA,OAAKgD,UAAU,uBACX9I,EAAAjB,QAAA+G,cAAA,KAAGgD,UAAU,gBACb9I,EAAAjB,QAAA+G,cAAA7F,EAAA8F,kBACIC,GAAG,iBACHK,eAAe,qBAIpBsC,IAAe3H,EAAAjC,QAAUgK,gBAChCH,EACI5I,EAAAjB,QAAA+G,cAAA,OAAKgD,UAAU,uBACX9I,EAAAjB,QAAA+G,cAAA,KAAGgD,UAAU,+BACb9I,EAAAjB,QAAA+G,cAAA7F,EAAA8F,kBACIC,GAAG,wBACHK,eAAe,oDAIpBsC,IAAe3H,EAAAjC,QAAUiK,kBAChCJ,EACI5I,EAAAjB,QAAA+G,cAAA,OAAKgD,UAAU,uBACX9I,EAAAjB,QAAA+G,cAAA,KAAGgD,UAAU,gBACb9I,EAAAjB,QAAA+G,cAAA7F,EAAA8F,kBACIC,GAAG,wBACHK,eAAe,qCAOnC,IAAM4C,MAEAhG,EAAchB,KAAKe,MAAMC,YACzBiG,EAAyE,SAAnD7K,EAAO6E,OAAOG,UAAUmF,uBAC9CW,EAAyE,SAAnD9K,EAAO6E,OAAOG,UAAUqF,uBAC9CU,EAA+E,SAAtD/K,EAAO6E,OAAOG,UAAUoF,0BACjDY,EAAoBpH,KAAKe,MAAMW,YAC/BJ,EAAwBtB,KAAKe,MAAMO,sBACnCE,EAAqBxB,KAAKe,MAAMS,kBAEtC,IAAIA,GAAsBF,GAAyBN,EAAa,CAC5D,GAAIqG,GAAa,EACbrH,MAAKe,MAAM6C,cACXyD,EAAa,aAGjB,IAAIC,GACAvJ,EAAAjB,QAAA+G,cAAA7F,EAAA8F,kBACIC,GAAG,eACHK,eAAe,WAInBpE,MAAKe,MAAMe,UACXwF,EACCvJ,EAAAjB,QAAA+G,cAAA,YACG9F,EAAAjB,QAAA+G,cAAA,QAAMgD,UAAU,+BAChB9I,EAAAjB,QAAA+G,cAAA7F,EAAA8F,kBACIC,GAAG,sBACHK,eAAe,oBAK3B4C,EAAcrE,KACV5E,EAAAjB,QAAA+G,cAAA,QACIpH,IAAI,aACJ8K,SAAUvH,KAAKG,WAEfpC,EAAAjB,QAAA+G,cAAA,OAAKgD,UAAU,2BACX9I,EAAAjB,QAAA+G,cAAAnE,EAAA5C,SACI0K,MAAOxH,KAAKe,MAAM6C,YAClB6D,QAAQ,IAEZ1J,EAAAjB,QAAA+G,cAAA,OAAKgD,UAAW,aAAeQ,GAC3BtJ,EAAAjB,QAAA+G,cAAA,SACIE,GAAG,UACH8C,UAAU,eACVa,IAAI,UACJ9E,KAAK,UACL3F,MAAO+C,KAAKe,MAAMN,QAClBkH,SAAU3H,KAAKO,oBACfqH,YAAa5H,KAAK6H,yBAClBC,WAAW,QACXC,eAAe,SAGvBhK,EAAAjB,QAAA+G,cAAA,OAAKgD,UAAW,aAAeQ,GAC3BtJ,EAAAjB,QAAA+G,cAAA,SACIE,GAAG,gBACHiE,KAAK,WACLnB,UAAU,eACVa,IAAI,WACJ9E,KAAK,WACL3F,MAAO+C,KAAKe,MAAMa,SAClB+F,SAAU3H,KAAKQ,qBACfoH,YAAazI,EAAMgF,gBAAgB,iBAAkB,YACrD2D,WAAW,WAGnB/J,EAAAjB,QAAA+G,cAAA,OAAKgD,UAAU,cACX9I,EAAAjB,QAAA+G,cAAA,UACIE,GAAG,cACHiE,KAAK,SACLnB,UAAU,mBAERS,OAoK1B,MA5JiD,SAA7ClL,EAAO6E,OAAOG,UAAU6G,kBAA+BjI,KAAKkI,sBAC5DlB,EAAcrE,KACV5E,EAAAjB,QAAA+G,cAAA,OACIgD,UAAU,aACVpK,IAAI,UAEJsB,EAAAjB,QAAA+G,cAAA,YACI9F,EAAAjB,QAAA+G,cAAA7F,EAAA8F,kBACIC,GAAG,kBACHK,eAAe,4BAEnBrG,EAAAjB,QAAA+G,cAAA5F,EAAAkK,MACIpE,GAAG,SACHqE,GAAI,wBAA0BpI,KAAKD,MAAMY,SAASC,OAClDiG,UAAU,qBAEV9I,EAAAjB,QAAA+G,cAAA7F,EAAA8F,kBACIC,GAAG,eACHK,eAAe,wBAQnC9C,GAAyBE,IACzBwF,EAAcrE,KACV5E,EAAAjB,QAAA+G,cAAA,OACIpH,IAAI,iBACJoK,UAAU,cAEV9I,EAAAjB,QAAA+G,cAAA5F,EAAAkK,MAAMC,GAAI,mBACNrK,EAAAjB,QAAA+G,cAAA7F,EAAA8F,kBACIC,GAAG,eACHK,eAAe,6BAO9B5C,GAAsBF,GAAyBN,KAAiBiG,GAAuBC,GAAuBE,GAAqBD,KACpIH,EAAcrE,KACV5E,EAAAjB,QAAA+G,cAAA,OACIpH,IAAI,UACJoK,UAAU,iBAEV9I,EAAAjB,QAAA+G,cAAA7F,EAAA8F,kBACIC,GAAG,WACHK,eAAe,SAK3B4C,EAAcrE,KACV5E,EAAAjB,QAAA+G,cAAA,MAAIpH,IAAI,eACJsB,EAAAjB,QAAA+G,cAAA7F,EAAA8F,kBACIC,GAAG,mBACHK,eAAe,qBAM3B6C,GACAD,EAAcrE,KACV5E,EAAAjB,QAAA+G,cAAA,KACIgD,UAAU,8BACVpK,IAAI,SACJ4L,KAAMnK,EAAA4H,QAAQwC,gBAAkB,gBAAkBtI,KAAKD,MAAMY,SAASC,QAEtE7C,EAAAjB,QAAA+G,cAAA,YACI9F,EAAAjB,QAAA+G,cAAA,QAAMgD,UAAU,SAChB9I,EAAAjB,QAAA+G,cAAA,YACI9F,EAAAjB,QAAA+G,cAAA7F,EAAA8F,kBACIC,GAAG,eACHK,eAAe,eAQnC8C,GACAF,EAAcrE,KACV5E,EAAAjB,QAAA+G,cAAA,KACIgD,UAAU,8BACVpK,IAAI,SACJ4L,KAAMnK,EAAA4H,QAAQwC,gBAAkB,gBAAkBtI,KAAKD,MAAMY,SAASC,QAEtE7C,EAAAjB,QAAA+G,cAAA,YACI9F,EAAAjB,QAAA+G,cAAA,QAAMgD,UAAU,SAChB9I,EAAAjB,QAAA+G,cAAA,YACI9F,EAAAjB,QAAA+G,cAAA7F,EAAA8F,kBACIC,GAAG,eACHK,eAAe,oBAQnC+C,GACAH,EAAcrE,KACV5E,EAAAjB,QAAA+G,cAAA,KACIgD,UAAU,iCACVpK,IAAI,YACJ4L,KAAMnK,EAAA4H,QAAQwC,gBAAkB,mBAAqBtI,KAAKD,MAAMY,SAASC,QAEzE7C,EAAAjB,QAAA+G,cAAA,YACI9F,EAAAjB,QAAA+G,cAAA,QAAMgD,UAAU,SAChB9I,EAAAjB,QAAA+G,cAAA,YACI9F,EAAAjB,QAAA+G,cAAA7F,EAAA8F,kBACIC,GAAG,kBACHK,eAAe,mBAQnCgD,GACAJ,EAAcrE,KACV5E,EAAAjB,QAAA+G,cAAA,KACIgD,UAAU,4BACVpK,IAAI,OACJ4L,KAAM,kBAAoBrI,KAAKD,MAAMY,SAASC,QAE9C7C,EAAAjB,QAAA+G,cAAA,YACI9F,EAAAjB,QAAA+G,cAAA,QAAMgD,UAAU,mCAChB9I,EAAAjB,QAAA+G,cAAA,YACKzH,EAAO6E,OAAOG,UAAUmH,wBAOhB,IAAzBvB,EAAcb,QACda,EAAcrE,KACV5E,EAAAjB,QAAA+G,cAAAnE,EAAA5C,SACI0K,MACIzJ,EAAAjB,QAAA+G,cAAA7F,EAAA8F,kBACIC,GAAG,kBACHK,eAAe,8EAGvBqD,QAAQ,KAMhB1J,EAAAjB,QAAA+G,cAAA,WACK8C,EACAK,MDsGTvK,IAAK,SACLQ,MAAO,WCjGP,GAAIuL,UACAC,SACAC,QACA1I,MAAKe,MAAMc,QACX2G,EACIzK,EAAAjB,QAAA+G,cAAAjE,EAAA9C,SACI2D,QAAST,KAAKe,MAAMN,QACpBmB,SAAU5B,KAAKe,MAAMa,SACrBvB,OAAQL,KAAKK,UAIrBmI,EAAUxI,KAAK2I,sBACfF,EAAgBzI,KAAK4I,uBAEjBF,EAAc,WAItB,IAAIG,GAAc,IAYlB,OAVIA,GADwC,SAAxCzM,EAAO6E,OAAOC,WAAWC,YAAkE,SAAzC/E,EAAO6E,OAAOC,WAAWqE,aAAwE,SAA9CnJ,EAAO6E,OAAOG,UAAUoE,kBAC/GpJ,EAAO6E,OAAOG,UAAU0H,sBAGlC/K,EAAAjB,QAAA+G,cAAA7F,EAAA8F,kBACIC,GAAG,uBACHK,eAAe,4EAMvBrG,EAAAjB,QAAA+G,cAAA,WACI9F,EAAAjB,QAAA+G,cAAArE,EAAA1C,QAAA,MACAiB,EAAAjB,QAAA+G,cAAA,OAAKgD,UAAU,aACX9I,EAAAjB,QAAA+G,cAAA,OAAKgD,UAAW,0BAA4B6B,GACxC3K,EAAAjB,QAAA+G,cAAA,OAAKgD,UAAU,oBACV4B,GAEL1K,EAAAjB,QAAA+G,cAAA,OACIgD,UAAU,mBACVhB,IAAAvG,EAAAxC,UAEJiB,EAAAjB,QAAA+G,cAAA,OAAKgD,UAAU,mBACX9I,EAAAjB,QAAA+G,cAAA,UAAKzH,EAAO6E,OAAOG,UAAUe,UAC7BpE,EAAAjB,QAAA+G,cAAA,MAAIgD,UAAU,gBACTgC,GAEJL,UDoHlB3I,GC3uBkC9B,EAAAjB,QAAMiM,UD8uBnD7M,GAAQY,QC9uBa+C,ID+uBQhD,KAAKX,EAASC,EAAoB","file":"25.aa1c47a4a15683f62ac4.js","sourcesContent":["webpackJsonp([25],{\n\n/***/ 2285:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(239);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(238);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(240);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _createClass2 = __webpack_require__(242);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _inherits2 = __webpack_require__(241);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _propTypes = __webpack_require__(21);\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = __webpack_require__(13);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactIntl = __webpack_require__(697);\n\nvar _reactRouterDom = __webpack_require__(244);\n\nvar _client = __webpack_require__(245);\n\nvar _browser_history = __webpack_require__(248);\n\nvar _global_actions = __webpack_require__(715);\n\nvar GlobalActions = _interopRequireWildcard(_global_actions);\n\nvar _team_actions = __webpack_require__(761);\n\nvar _user_actions = __webpack_require__(717);\n\nvar _browser_store = __webpack_require__(767);\n\nvar _browser_store2 = _interopRequireDefault(_browser_store);\n\nvar _user_store = __webpack_require__(707);\n\nvar _user_store2 = _interopRequireDefault(_user_store);\n\nvar _team_store = __webpack_require__(713);\n\nvar _team_store2 = _interopRequireDefault(_team_store);\n\nvar _constants = __webpack_require__(43);\n\nvar _constants2 = _interopRequireDefault(_constants);\n\nvar _text_formatting = __webpack_require__(754);\n\nvar TextFormatting = _interopRequireWildcard(_text_formatting);\n\nvar _utils = __webpack_require__(698);\n\nvar Utils = _interopRequireWildcard(_utils);\n\nvar _post_utils = __webpack_require__(748);\n\nvar _logo = __webpack_require__(791);\n\nvar _logo2 = _interopRequireDefault(_logo);\n\nvar _announcement_bar = __webpack_require__(819);\n\nvar _announcement_bar2 = _interopRequireDefault(_announcement_bar);\n\nvar _form_error = __webpack_require__(762);\n\nvar _form_error2 = _interopRequireDefault(_form_error);\n\nvar _login_mfa = __webpack_require__(925);\n\nvar _login_mfa2 = _interopRequireDefault(_login_mfa);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nvar LoginController = function (_React$Component) {\n    (0, _inherits3.default)(LoginController, _React$Component);\n    (0, _createClass3.default)(LoginController, null, [{\n        key: 'propTypes',\n        get: function get() {\n            return {\n                location: _propTypes2.default.object.isRequired\n            };\n        }\n    }]);\n\n    function LoginController(props) {\n        (0, _classCallCheck3.default)(this, LoginController);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (LoginController.__proto__ || (0, _getPrototypeOf2.default)(LoginController)).call(this, props));\n\n        _this.preSubmit = _this.preSubmit.bind(_this);\n        _this.submit = _this.submit.bind(_this);\n        _this.finishSignin = _this.finishSignin.bind(_this);\n\n        _this.handleLoginIdChange = _this.handleLoginIdChange.bind(_this);\n        _this.handlePasswordChange = _this.handlePasswordChange.bind(_this);\n\n        var loginId = '';\n        if (new URLSearchParams(_this.props.location.search).get('extra') === _constants2.default.SIGNIN_VERIFIED && new URLSearchParams(_this.props.location.search).get('email')) {\n            loginId = new URLSearchParams(_this.props.location.search).get('email');\n        }\n\n        _this.state = {\n            ldapEnabled: global.window.mm_license.IsLicensed === 'true' && global.window.mm_config.EnableLdap === 'true',\n            usernameSigninEnabled: global.window.mm_config.EnableSignInWithUsername === 'true',\n            emailSigninEnabled: global.window.mm_config.EnableSignInWithEmail === 'true',\n            samlEnabled: global.window.mm_license.IsLicensed === 'true' && global.window.mm_config.EnableSaml === 'true',\n            loginId: loginId,\n            password: '',\n            showMfa: false,\n            loading: false\n        };\n        return _this;\n    }\n\n    (0, _createClass3.default)(LoginController, [{\n        key: 'componentDidMount',\n        value: function componentDidMount() {\n            document.title = global.window.mm_config.SiteName;\n            _browser_store2.default.removeGlobalItem('team');\n            var experimentalPrimaryTeam = global.mm_config.ExperimentalPrimaryTeam;\n            var primaryTeam = _team_store2.default.getByName(experimentalPrimaryTeam);\n            if (_user_store2.default.getCurrentUser() && primaryTeam) {\n                _browser_history.browserHistory.push('/' + primaryTeam.name + '/channels/' + _constants2.default.DEFAULT_CHANNEL);\n            } else if (_user_store2.default.getCurrentUser()) {\n                GlobalActions.redirectUserToDefaultTeam();\n            }\n\n            if (new URLSearchParams(this.props.location.search).get('extra') === _constants2.default.SIGNIN_VERIFIED && new URLSearchParams(this.props.location.search).get('email')) {\n                this.refs.password.focus();\n            }\n        }\n    }, {\n        key: 'preSubmit',\n        value: function preSubmit(e) {\n            var _this2 = this;\n\n            e.preventDefault();\n\n            var location = this.props.location;\n\n            var newQuery = location.search.replace(/(extra=password_change)&?/i, '');\n            if (newQuery !== location.search) {\n                _browser_history.browserHistory.replace('' + location.pathname + newQuery + location.hash);\n            }\n\n            // password managers don't always call onInput handlers for form fields so it's possible\n            // for the state to get out of sync with what the user sees in the browser\n            var loginId = this.refs.loginId.value;\n            if (loginId !== this.state.loginId) {\n                this.setState({ loginId: loginId });\n            }\n\n            var password = this.refs.password.value;\n            if (password !== this.state.password) {\n                this.setState({ password: password });\n            }\n\n            // don't trim the password since we support spaces in passwords\n            loginId = loginId.trim().toLowerCase();\n\n            if (!loginId) {\n                // it's slightly weird to be constructing the message ID, but it's a bit nicer than triply nested if statements\n                var msgId = 'login.no';\n                if (this.state.emailSigninEnabled) {\n                    msgId += 'Email';\n                }\n                if (this.state.usernameSigninEnabled) {\n                    msgId += 'Username';\n                }\n                if (this.state.ldapEnabled) {\n                    msgId += 'LdapUsername';\n                }\n\n                this.setState({\n                    serverError: _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: msgId,\n                        values: {\n                            ldapUsername: global.window.mm_config.LdapLoginFieldName || Utils.localizeMessage('login.ldapUsernameLower', 'AD/LDAP username')\n                        }\n                    })\n                });\n                return;\n            }\n\n            if (!password) {\n                this.setState({\n                    serverError: _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'login.noPassword',\n                        defaultMessage: 'Please enter your password'\n                    })\n                });\n                return;\n            }\n\n            (0, _user_actions.checkMfa)(loginId, function (requiresMfa) {\n                if (requiresMfa) {\n                    _this2.setState({ showMfa: true });\n                } else {\n                    _this2.submit(loginId, password, '');\n                }\n            }, function (err) {\n                _this2.setState({ serverError: err.message });\n            });\n        }\n    }, {\n        key: 'submit',\n        value: function submit(loginId, password, token) {\n            var _this3 = this;\n\n            this.setState({ serverError: null, loading: true });\n\n            (0, _user_actions.webLogin)(loginId, password, token, function () {\n                // check for query params brought over from signup_user_complete\n                var params = new URLSearchParams(_this3.props.location.search);\n                var hash = params.get('h') || '';\n                var data = params.get('d') || '';\n                var inviteId = params.get('id') || '';\n\n                if (inviteId || hash) {\n                    (0, _team_actions.addUserToTeamFromInvite)(data, hash, inviteId, function (team) {\n                        _this3.finishSignin(team);\n                    }, function () {\n                        // there's not really a good way to deal with this, so just let the user log in like normal\n                        _this3.finishSignin();\n                    });\n\n                    return;\n                }\n\n                _this3.finishSignin();\n            }, function (err) {\n                if (err.id === 'api.user.login.not_verified.app_error') {\n                    _browser_history.browserHistory.push('/should_verify_email?&email=' + encodeURIComponent(loginId));\n                } else if (err.id === 'store.sql_user.get_for_login.app_error' || err.id === 'ent.ldap.do_login.user_not_registered.app_error') {\n                    _this3.setState({\n                        showMfa: false,\n                        loading: false,\n                        serverError: _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'login.userNotFound',\n                            defaultMessage: 'We couldn\\'t find an account matching your login credentials.'\n                        })\n                    });\n                } else if (err.id === 'api.user.check_user_password.invalid.app_error' || err.id === 'ent.ldap.do_login.invalid_password.app_error') {\n                    _this3.setState({\n                        showMfa: false,\n                        loading: false,\n                        serverError: _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'login.invalidPassword',\n                            defaultMessage: 'Your password is incorrect.'\n                        })\n                    });\n                } else {\n                    _this3.setState({ showMfa: false, serverError: err.message, loading: false });\n                }\n            });\n        }\n    }, {\n        key: 'finishSignin',\n        value: function finishSignin(team) {\n            var experimentalPrimaryTeam = global.mm_config.ExperimentalPrimaryTeam;\n            var primaryTeam = _team_store2.default.getByName(experimentalPrimaryTeam);\n            var query = new URLSearchParams(this.props.location.search);\n            var redirectTo = query.get('redirect_to');\n\n            GlobalActions.loadCurrentLocale();\n            if (redirectTo && redirectTo.match(/^\\/([^/]|$)/)) {\n                _browser_history.browserHistory.push(redirectTo);\n            } else if (team) {\n                _browser_history.browserHistory.push('/' + team.name);\n            } else if (primaryTeam) {\n                _browser_history.browserHistory.push('/' + primaryTeam.name + '/channels/' + _constants2.default.DEFAULT_CHANNEL);\n            } else {\n                GlobalActions.redirectUserToDefaultTeam();\n            }\n        }\n    }, {\n        key: 'handleLoginIdChange',\n        value: function handleLoginIdChange(e) {\n            this.setState({\n                loginId: e.target.value\n            });\n        }\n    }, {\n        key: 'handlePasswordChange',\n        value: function handlePasswordChange(e) {\n            this.setState({\n                password: e.target.value\n            });\n        }\n    }, {\n        key: 'createCustomLogin',\n        value: function createCustomLogin() {\n            if (global.window.mm_license.IsLicensed === 'true' && global.window.mm_license.CustomBrand === 'true' && global.window.mm_config.EnableCustomBrand === 'true') {\n                var text = global.window.mm_config.CustomBrandText || '';\n                var formattedText = TextFormatting.formatText(text);\n\n                return _react2.default.createElement(\n                    'div',\n                    null,\n                    _react2.default.createElement('img', {\n                        src: _client.Client4.getBrandImageUrl(0)\n                    }),\n                    _react2.default.createElement(\n                        'p',\n                        null,\n                        (0, _post_utils.messageHtmlToComponent)(formattedText, false, { mentions: false })\n                    )\n                );\n            }\n\n            return null;\n        }\n    }, {\n        key: 'createLoginPlaceholder',\n        value: function createLoginPlaceholder() {\n            var ldapEnabled = this.state.ldapEnabled;\n            var usernameSigninEnabled = this.state.usernameSigninEnabled;\n            var emailSigninEnabled = this.state.emailSigninEnabled;\n\n            var loginPlaceholders = [];\n            if (emailSigninEnabled) {\n                loginPlaceholders.push(Utils.localizeMessage('login.email', 'Email'));\n            }\n\n            if (usernameSigninEnabled) {\n                loginPlaceholders.push(Utils.localizeMessage('login.username', 'Username'));\n            }\n\n            if (ldapEnabled) {\n                if (global.window.mm_config.LdapLoginFieldName) {\n                    loginPlaceholders.push(global.window.mm_config.LdapLoginFieldName);\n                } else {\n                    loginPlaceholders.push(Utils.localizeMessage('login.ldapUsername', 'AD/LDAP Username'));\n                }\n            }\n\n            if (loginPlaceholders.length >= 2) {\n                return loginPlaceholders.slice(0, loginPlaceholders.length - 1).join(', ') + Utils.localizeMessage('login.placeholderOr', ' or ') + loginPlaceholders[loginPlaceholders.length - 1];\n            } else if (loginPlaceholders.length === 1) {\n                return loginPlaceholders[0];\n            }\n\n            return '';\n        }\n    }, {\n        key: 'checkSignUpEnabled',\n        value: function checkSignUpEnabled() {\n            return global.window.mm_config.EnableSignUpWithEmail === 'true' || global.window.mm_config.EnableSignUpWithGitLab === 'true' || global.window.mm_config.EnableSignUpWithOffice365 === 'true' || global.window.mm_config.EnableSignUpWithGoogle === 'true' || global.window.mm_config.EnableLdap === 'true' || global.window.mm_config.EnableSaml === 'true';\n        }\n    }, {\n        key: 'createLoginOptions',\n        value: function createLoginOptions() {\n            var extraParam = new URLSearchParams(this.props.location.search).get('extra');\n            var extraBox = '';\n            if (extraParam) {\n                if (extraParam === _constants2.default.SIGNIN_CHANGE) {\n                    extraBox = _react2.default.createElement(\n                        'div',\n                        { className: 'alert alert-success' },\n                        _react2.default.createElement('i', { className: 'fa fa-check' }),\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'login.changed',\n                            defaultMessage: ' Sign-in method changed successfully'\n                        })\n                    );\n                } else if (extraParam === _constants2.default.SIGNIN_VERIFIED) {\n                    extraBox = _react2.default.createElement(\n                        'div',\n                        { className: 'alert alert-success' },\n                        _react2.default.createElement('i', { className: 'fa fa-check' }),\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'login.verified',\n                            defaultMessage: ' Email Verified'\n                        })\n                    );\n                } else if (extraParam === _constants2.default.SESSION_EXPIRED) {\n                    extraBox = _react2.default.createElement(\n                        'div',\n                        { className: 'alert alert-warning' },\n                        _react2.default.createElement('i', { className: 'fa fa-exclamation-triangle' }),\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'login.session_expired',\n                            defaultMessage: ' Your session has expired. Please login again.'\n                        })\n                    );\n                } else if (extraParam === _constants2.default.PASSWORD_CHANGE) {\n                    extraBox = _react2.default.createElement(\n                        'div',\n                        { className: 'alert alert-success' },\n                        _react2.default.createElement('i', { className: 'fa fa-check' }),\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'login.passwordChanged',\n                            defaultMessage: ' Password updated successfully'\n                        })\n                    );\n                }\n            }\n\n            var loginControls = [];\n\n            var ldapEnabled = this.state.ldapEnabled;\n            var gitlabSigninEnabled = global.window.mm_config.EnableSignUpWithGitLab === 'true';\n            var googleSigninEnabled = global.window.mm_config.EnableSignUpWithGoogle === 'true';\n            var office365SigninEnabled = global.window.mm_config.EnableSignUpWithOffice365 === 'true';\n            var samlSigninEnabled = this.state.samlEnabled;\n            var usernameSigninEnabled = this.state.usernameSigninEnabled;\n            var emailSigninEnabled = this.state.emailSigninEnabled;\n\n            if (emailSigninEnabled || usernameSigninEnabled || ldapEnabled) {\n                var errorClass = '';\n                if (this.state.serverError) {\n                    errorClass = ' has-error';\n                }\n\n                var loginButton = _react2.default.createElement(_reactIntl.FormattedMessage, {\n                    id: 'login.signIn',\n                    defaultMessage: 'Sign in'\n                });\n\n                if (this.state.loading) {\n                    loginButton = _react2.default.createElement(\n                        'span',\n                        null,\n                        _react2.default.createElement('span', { className: 'fa fa-refresh icon--rotate' }),\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'login.signInLoading',\n                            defaultMessage: 'Signing in...'\n                        })\n                    );\n                }\n\n                loginControls.push(_react2.default.createElement(\n                    'form',\n                    {\n                        key: 'loginBoxes',\n                        onSubmit: this.preSubmit\n                    },\n                    _react2.default.createElement(\n                        'div',\n                        { className: 'signup__email-container' },\n                        _react2.default.createElement(_form_error2.default, {\n                            error: this.state.serverError,\n                            margin: true\n                        }),\n                        _react2.default.createElement(\n                            'div',\n                            { className: 'form-group' + errorClass },\n                            _react2.default.createElement('input', {\n                                id: 'loginId',\n                                className: 'form-control',\n                                ref: 'loginId',\n                                name: 'loginId',\n                                value: this.state.loginId,\n                                onChange: this.handleLoginIdChange,\n                                placeholder: this.createLoginPlaceholder(),\n                                spellCheck: 'false',\n                                autoCapitalize: 'off'\n                            })\n                        ),\n                        _react2.default.createElement(\n                            'div',\n                            { className: 'form-group' + errorClass },\n                            _react2.default.createElement('input', {\n                                id: 'loginPassword',\n                                type: 'password',\n                                className: 'form-control',\n                                ref: 'password',\n                                name: 'password',\n                                value: this.state.password,\n                                onChange: this.handlePasswordChange,\n                                placeholder: Utils.localizeMessage('login.password', 'Password'),\n                                spellCheck: 'false'\n                            })\n                        ),\n                        _react2.default.createElement(\n                            'div',\n                            { className: 'form-group' },\n                            _react2.default.createElement(\n                                'button',\n                                {\n                                    id: 'loginButton',\n                                    type: 'submit',\n                                    className: 'btn btn-primary'\n                                },\n                                loginButton\n                            )\n                        )\n                    )\n                ));\n            }\n\n            if (global.window.mm_config.EnableOpenServer === 'true' && this.checkSignUpEnabled()) {\n                loginControls.push(_react2.default.createElement(\n                    'div',\n                    {\n                        className: 'form-group',\n                        key: 'signup'\n                    },\n                    _react2.default.createElement(\n                        'span',\n                        null,\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'login.noAccount',\n                            defaultMessage: 'Don\\'t have an account? '\n                        }),\n                        _react2.default.createElement(\n                            _reactRouterDom.Link,\n                            {\n                                id: 'signup',\n                                to: '/signup_user_complete' + this.props.location.search,\n                                className: 'signup-team-login'\n                            },\n                            _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                id: 'login.create',\n                                defaultMessage: 'Create one now'\n                            })\n                        )\n                    )\n                ));\n            }\n\n            if (usernameSigninEnabled || emailSigninEnabled) {\n                loginControls.push(_react2.default.createElement(\n                    'div',\n                    {\n                        key: 'forgotPassword',\n                        className: 'form-group'\n                    },\n                    _react2.default.createElement(\n                        _reactRouterDom.Link,\n                        { to: '/reset_password' },\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'login.forgot',\n                            defaultMessage: 'I forgot my password'\n                        })\n                    )\n                ));\n            }\n\n            if ((emailSigninEnabled || usernameSigninEnabled || ldapEnabled) && (gitlabSigninEnabled || googleSigninEnabled || samlSigninEnabled || office365SigninEnabled)) {\n                loginControls.push(_react2.default.createElement(\n                    'div',\n                    {\n                        key: 'divider',\n                        className: 'or__container'\n                    },\n                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'login.or',\n                        defaultMessage: 'or'\n                    })\n                ));\n\n                loginControls.push(_react2.default.createElement(\n                    'h5',\n                    { key: 'oauthHeader' },\n                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'login.signInWith',\n                        defaultMessage: 'Sign in with:'\n                    })\n                ));\n            }\n\n            if (gitlabSigninEnabled) {\n                loginControls.push(_react2.default.createElement(\n                    'a',\n                    {\n                        className: 'btn btn-custom-login gitlab',\n                        key: 'gitlab',\n                        href: _client.Client4.getOAuthRoute() + '/gitlab/login' + this.props.location.search\n                    },\n                    _react2.default.createElement(\n                        'span',\n                        null,\n                        _react2.default.createElement('span', { className: 'icon' }),\n                        _react2.default.createElement(\n                            'span',\n                            null,\n                            _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                id: 'login.gitlab',\n                                defaultMessage: 'GitLab'\n                            })\n                        )\n                    )\n                ));\n            }\n\n            if (googleSigninEnabled) {\n                loginControls.push(_react2.default.createElement(\n                    'a',\n                    {\n                        className: 'btn btn-custom-login google',\n                        key: 'google',\n                        href: _client.Client4.getOAuthRoute() + '/google/login' + this.props.location.search\n                    },\n                    _react2.default.createElement(\n                        'span',\n                        null,\n                        _react2.default.createElement('span', { className: 'icon' }),\n                        _react2.default.createElement(\n                            'span',\n                            null,\n                            _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                id: 'login.google',\n                                defaultMessage: 'Google Apps'\n                            })\n                        )\n                    )\n                ));\n            }\n\n            if (office365SigninEnabled) {\n                loginControls.push(_react2.default.createElement(\n                    'a',\n                    {\n                        className: 'btn btn-custom-login office365',\n                        key: 'office365',\n                        href: _client.Client4.getOAuthRoute() + '/office365/login' + this.props.location.search\n                    },\n                    _react2.default.createElement(\n                        'span',\n                        null,\n                        _react2.default.createElement('span', { className: 'icon' }),\n                        _react2.default.createElement(\n                            'span',\n                            null,\n                            _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                id: 'login.office365',\n                                defaultMessage: 'Office 365'\n                            })\n                        )\n                    )\n                ));\n            }\n\n            if (samlSigninEnabled) {\n                loginControls.push(_react2.default.createElement(\n                    'a',\n                    {\n                        className: 'btn btn-custom-login saml',\n                        key: 'saml',\n                        href: '/login/sso/saml' + this.props.location.search\n                    },\n                    _react2.default.createElement(\n                        'span',\n                        null,\n                        _react2.default.createElement('span', { className: 'icon fa fa-lock fa--margin-top' }),\n                        _react2.default.createElement(\n                            'span',\n                            null,\n                            global.window.mm_config.SamlLoginButtonText\n                        )\n                    )\n                ));\n            }\n\n            if (loginControls.length === 0) {\n                loginControls.push(_react2.default.createElement(_form_error2.default, {\n                    error: _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'login.noMethods',\n                        defaultMessage: 'No sign-in methods are enabled. Please contact your System Administrator.'\n                    }),\n                    margin: true\n                }));\n            }\n\n            return _react2.default.createElement(\n                'div',\n                null,\n                extraBox,\n                loginControls\n            );\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var content = void 0;\n            var customContent = void 0;\n            var customClass = void 0;\n            if (this.state.showMfa) {\n                content = _react2.default.createElement(_login_mfa2.default, {\n                    loginId: this.state.loginId,\n                    password: this.state.password,\n                    submit: this.submit\n                });\n            } else {\n                content = this.createLoginOptions();\n                customContent = this.createCustomLogin();\n                if (customContent) {\n                    customClass = 'branded';\n                }\n            }\n\n            var description = null;\n            if (global.window.mm_license.IsLicensed === 'true' && global.window.mm_license.CustomBrand === 'true' && global.window.mm_config.EnableCustomBrand === 'true') {\n                description = global.window.mm_config.CustomDescriptionText;\n            } else {\n                description = _react2.default.createElement(_reactIntl.FormattedMessage, {\n                    id: 'web.root.signup_info',\n                    defaultMessage: 'All team communication in one place, searchable and accessible anywhere'\n                });\n            }\n\n            return _react2.default.createElement(\n                'div',\n                null,\n                _react2.default.createElement(_announcement_bar2.default, null),\n                _react2.default.createElement(\n                    'div',\n                    { className: 'col-sm-12' },\n                    _react2.default.createElement(\n                        'div',\n                        { className: 'signup-team__container ' + customClass },\n                        _react2.default.createElement(\n                            'div',\n                            { className: 'signup__markdown' },\n                            customContent\n                        ),\n                        _react2.default.createElement('img', {\n                            className: 'signup-team-logo',\n                            src: _logo2.default\n                        }),\n                        _react2.default.createElement(\n                            'div',\n                            { className: 'signup__content' },\n                            _react2.default.createElement(\n                                'h1',\n                                null,\n                                global.window.mm_config.SiteName\n                            ),\n                            _react2.default.createElement(\n                                'h4',\n                                { className: 'color--light' },\n                                description\n                            ),\n                            content\n                        )\n                    )\n                )\n            );\n        }\n    }]);\n    return LoginController;\n}(_react2.default.Component);\n\nexports.default = LoginController;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(22)))\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 25.aa1c47a4a15683f62ac4.js","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\nimport {Client4} from 'mattermost-redux/client';\n\nimport {browserHistory} from 'utils/browser_history';\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport {addUserToTeamFromInvite} from 'actions/team_actions.jsx';\nimport {checkMfa, webLogin} from 'actions/user_actions.jsx';\nimport BrowserStore from 'stores/browser_store.jsx';\nimport UserStore from 'stores/user_store.jsx';\nimport TeamStore from 'stores/team_store.jsx';\nimport Constants from 'utils/constants.jsx';\nimport * as TextFormatting from 'utils/text_formatting.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {messageHtmlToComponent} from 'utils/post_utils.jsx';\nimport logoImage from 'images/logo.png';\nimport AnnouncementBar from 'components/announcement_bar';\nimport FormError from 'components/form_error.jsx';\n\nimport LoginMfa from './components/login_mfa.jsx';\n\nexport default class LoginController extends React.Component {\n    static get propTypes() {\n        return {\n            location: PropTypes.object.isRequired\n        };\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.preSubmit = this.preSubmit.bind(this);\n        this.submit = this.submit.bind(this);\n        this.finishSignin = this.finishSignin.bind(this);\n\n        this.handleLoginIdChange = this.handleLoginIdChange.bind(this);\n        this.handlePasswordChange = this.handlePasswordChange.bind(this);\n\n        let loginId = '';\n        if ((new URLSearchParams(this.props.location.search)).get('extra') === Constants.SIGNIN_VERIFIED && (new URLSearchParams(this.props.location.search)).get('email')) {\n            loginId = (new URLSearchParams(this.props.location.search)).get('email');\n        }\n\n        this.state = {\n            ldapEnabled: global.window.mm_license.IsLicensed === 'true' && global.window.mm_config.EnableLdap === 'true',\n            usernameSigninEnabled: global.window.mm_config.EnableSignInWithUsername === 'true',\n            emailSigninEnabled: global.window.mm_config.EnableSignInWithEmail === 'true',\n            samlEnabled: global.window.mm_license.IsLicensed === 'true' && global.window.mm_config.EnableSaml === 'true',\n            loginId,\n            password: '',\n            showMfa: false,\n            loading: false\n        };\n    }\n\n    componentDidMount() {\n        document.title = global.window.mm_config.SiteName;\n        BrowserStore.removeGlobalItem('team');\n        const experimentalPrimaryTeam = global.mm_config.ExperimentalPrimaryTeam;\n        const primaryTeam = TeamStore.getByName(experimentalPrimaryTeam);\n        if (UserStore.getCurrentUser() && primaryTeam) {\n            browserHistory.push(`/${primaryTeam.name}/channels/${Constants.DEFAULT_CHANNEL}`);\n        } else if (UserStore.getCurrentUser()) {\n            GlobalActions.redirectUserToDefaultTeam();\n        }\n\n        if ((new URLSearchParams(this.props.location.search)).get('extra') === Constants.SIGNIN_VERIFIED && (new URLSearchParams(this.props.location.search)).get('email')) {\n            this.refs.password.focus();\n        }\n    }\n\n    preSubmit(e) {\n        e.preventDefault();\n\n        const {location} = this.props;\n        const newQuery = location.search.replace(/(extra=password_change)&?/i, '');\n        if (newQuery !== location.search) {\n            browserHistory.replace(`${location.pathname}${newQuery}${location.hash}`);\n        }\n\n        // password managers don't always call onInput handlers for form fields so it's possible\n        // for the state to get out of sync with what the user sees in the browser\n        let loginId = this.refs.loginId.value;\n        if (loginId !== this.state.loginId) {\n            this.setState({loginId});\n        }\n\n        const password = this.refs.password.value;\n        if (password !== this.state.password) {\n            this.setState({password});\n        }\n\n        // don't trim the password since we support spaces in passwords\n        loginId = loginId.trim().toLowerCase();\n\n        if (!loginId) {\n            // it's slightly weird to be constructing the message ID, but it's a bit nicer than triply nested if statements\n            let msgId = 'login.no';\n            if (this.state.emailSigninEnabled) {\n                msgId += 'Email';\n            }\n            if (this.state.usernameSigninEnabled) {\n                msgId += 'Username';\n            }\n            if (this.state.ldapEnabled) {\n                msgId += 'LdapUsername';\n            }\n\n            this.setState({\n                serverError: (\n                    <FormattedMessage\n                        id={msgId}\n                        values={{\n                            ldapUsername: global.window.mm_config.LdapLoginFieldName || Utils.localizeMessage('login.ldapUsernameLower', 'AD/LDAP username')\n                        }}\n                    />\n                )\n            });\n            return;\n        }\n\n        if (!password) {\n            this.setState({\n                serverError: (\n                    <FormattedMessage\n                        id='login.noPassword'\n                        defaultMessage='Please enter your password'\n                    />\n                )\n            });\n            return;\n        }\n\n        checkMfa(\n            loginId,\n            (requiresMfa) => {\n                if (requiresMfa) {\n                    this.setState({showMfa: true});\n                } else {\n                    this.submit(loginId, password, '');\n                }\n            },\n            (err) => {\n                this.setState({serverError: err.message});\n            }\n        );\n    }\n\n    submit(loginId, password, token) {\n        this.setState({serverError: null, loading: true});\n\n        webLogin(\n            loginId,\n            password,\n            token,\n            () => {\n                // check for query params brought over from signup_user_complete\n                const params = new URLSearchParams(this.props.location.search);\n                const hash = params.get('h') || '';\n                const data = params.get('d') || '';\n                const inviteId = params.get('id') || '';\n\n                if (inviteId || hash) {\n                    addUserToTeamFromInvite(\n                        data,\n                        hash,\n                        inviteId,\n                        (team) => {\n                            this.finishSignin(team);\n                        },\n                        () => {\n                            // there's not really a good way to deal with this, so just let the user log in like normal\n                            this.finishSignin();\n                        }\n                    );\n\n                    return;\n                }\n\n                this.finishSignin();\n            },\n            (err) => {\n                if (err.id === 'api.user.login.not_verified.app_error') {\n                    browserHistory.push('/should_verify_email?&email=' + encodeURIComponent(loginId));\n                } else if (err.id === 'store.sql_user.get_for_login.app_error' ||\n                    err.id === 'ent.ldap.do_login.user_not_registered.app_error') {\n                    this.setState({\n                        showMfa: false,\n                        loading: false,\n                        serverError: (\n                            <FormattedMessage\n                                id='login.userNotFound'\n                                defaultMessage=\"We couldn't find an account matching your login credentials.\"\n                            />\n                        )\n                    });\n                } else if (err.id === 'api.user.check_user_password.invalid.app_error' || err.id === 'ent.ldap.do_login.invalid_password.app_error') {\n                    this.setState({\n                        showMfa: false,\n                        loading: false,\n                        serverError: (\n                            <FormattedMessage\n                                id='login.invalidPassword'\n                                defaultMessage='Your password is incorrect.'\n                            />\n                        )\n                    });\n                } else {\n                    this.setState({showMfa: false, serverError: err.message, loading: false});\n                }\n            }\n        );\n    }\n\n    finishSignin(team) {\n        const experimentalPrimaryTeam = global.mm_config.ExperimentalPrimaryTeam;\n        const primaryTeam = TeamStore.getByName(experimentalPrimaryTeam);\n        const query = new URLSearchParams(this.props.location.search);\n        const redirectTo = query.get('redirect_to');\n\n        GlobalActions.loadCurrentLocale();\n        if (redirectTo && redirectTo.match(/^\\/([^/]|$)/)) {\n            browserHistory.push(redirectTo);\n        } else if (team) {\n            browserHistory.push(`/${team.name}`);\n        } else if (primaryTeam) {\n            browserHistory.push(`/${primaryTeam.name}/channels/${Constants.DEFAULT_CHANNEL}`);\n        } else {\n            GlobalActions.redirectUserToDefaultTeam();\n        }\n    }\n\n    handleLoginIdChange(e) {\n        this.setState({\n            loginId: e.target.value\n        });\n    }\n\n    handlePasswordChange(e) {\n        this.setState({\n            password: e.target.value\n        });\n    }\n\n    createCustomLogin() {\n        if (global.window.mm_license.IsLicensed === 'true' &&\n                global.window.mm_license.CustomBrand === 'true' &&\n                global.window.mm_config.EnableCustomBrand === 'true') {\n            const text = global.window.mm_config.CustomBrandText || '';\n            const formattedText = TextFormatting.formatText(text);\n\n            return (\n                <div>\n                    <img\n                        src={Client4.getBrandImageUrl(0)}\n                    />\n                    <p>\n                        {messageHtmlToComponent(formattedText, false, {mentions: false})}\n                    </p>\n                </div>\n            );\n        }\n\n        return null;\n    }\n\n    createLoginPlaceholder() {\n        const ldapEnabled = this.state.ldapEnabled;\n        const usernameSigninEnabled = this.state.usernameSigninEnabled;\n        const emailSigninEnabled = this.state.emailSigninEnabled;\n\n        const loginPlaceholders = [];\n        if (emailSigninEnabled) {\n            loginPlaceholders.push(Utils.localizeMessage('login.email', 'Email'));\n        }\n\n        if (usernameSigninEnabled) {\n            loginPlaceholders.push(Utils.localizeMessage('login.username', 'Username'));\n        }\n\n        if (ldapEnabled) {\n            if (global.window.mm_config.LdapLoginFieldName) {\n                loginPlaceholders.push(global.window.mm_config.LdapLoginFieldName);\n            } else {\n                loginPlaceholders.push(Utils.localizeMessage('login.ldapUsername', 'AD/LDAP Username'));\n            }\n        }\n\n        if (loginPlaceholders.length >= 2) {\n            return loginPlaceholders.slice(0, loginPlaceholders.length - 1).join(', ') +\n                Utils.localizeMessage('login.placeholderOr', ' or ') +\n                loginPlaceholders[loginPlaceholders.length - 1];\n        } else if (loginPlaceholders.length === 1) {\n            return loginPlaceholders[0];\n        }\n\n        return '';\n    }\n\n    checkSignUpEnabled() {\n        return global.window.mm_config.EnableSignUpWithEmail === 'true' ||\n            global.window.mm_config.EnableSignUpWithGitLab === 'true' ||\n            global.window.mm_config.EnableSignUpWithOffice365 === 'true' ||\n            global.window.mm_config.EnableSignUpWithGoogle === 'true' ||\n            global.window.mm_config.EnableLdap === 'true' ||\n            global.window.mm_config.EnableSaml === 'true';\n    }\n\n    createLoginOptions() {\n        const extraParam = (new URLSearchParams(this.props.location.search)).get('extra');\n        let extraBox = '';\n        if (extraParam) {\n            if (extraParam === Constants.SIGNIN_CHANGE) {\n                extraBox = (\n                    <div className='alert alert-success'>\n                        <i className='fa fa-check'/>\n                        <FormattedMessage\n                            id='login.changed'\n                            defaultMessage=' Sign-in method changed successfully'\n                        />\n                    </div>\n                );\n            } else if (extraParam === Constants.SIGNIN_VERIFIED) {\n                extraBox = (\n                    <div className='alert alert-success'>\n                        <i className='fa fa-check'/>\n                        <FormattedMessage\n                            id='login.verified'\n                            defaultMessage=' Email Verified'\n                        />\n                    </div>\n                );\n            } else if (extraParam === Constants.SESSION_EXPIRED) {\n                extraBox = (\n                    <div className='alert alert-warning'>\n                        <i className='fa fa-exclamation-triangle'/>\n                        <FormattedMessage\n                            id='login.session_expired'\n                            defaultMessage=' Your session has expired. Please login again.'\n                        />\n                    </div>\n                );\n            } else if (extraParam === Constants.PASSWORD_CHANGE) {\n                extraBox = (\n                    <div className='alert alert-success'>\n                        <i className='fa fa-check'/>\n                        <FormattedMessage\n                            id='login.passwordChanged'\n                            defaultMessage=' Password updated successfully'\n                        />\n                    </div>\n                );\n            }\n        }\n\n        const loginControls = [];\n\n        const ldapEnabled = this.state.ldapEnabled;\n        const gitlabSigninEnabled = global.window.mm_config.EnableSignUpWithGitLab === 'true';\n        const googleSigninEnabled = global.window.mm_config.EnableSignUpWithGoogle === 'true';\n        const office365SigninEnabled = global.window.mm_config.EnableSignUpWithOffice365 === 'true';\n        const samlSigninEnabled = this.state.samlEnabled;\n        const usernameSigninEnabled = this.state.usernameSigninEnabled;\n        const emailSigninEnabled = this.state.emailSigninEnabled;\n\n        if (emailSigninEnabled || usernameSigninEnabled || ldapEnabled) {\n            let errorClass = '';\n            if (this.state.serverError) {\n                errorClass = ' has-error';\n            }\n\n            let loginButton = (\n                <FormattedMessage\n                    id='login.signIn'\n                    defaultMessage='Sign in'\n                />\n            );\n\n            if (this.state.loading) {\n                loginButton =\n                (<span>\n                    <span className='fa fa-refresh icon--rotate'/>\n                    <FormattedMessage\n                        id='login.signInLoading'\n                        defaultMessage='Signing in...'\n                    />\n                </span>);\n            }\n\n            loginControls.push(\n                <form\n                    key='loginBoxes'\n                    onSubmit={this.preSubmit}\n                >\n                    <div className='signup__email-container'>\n                        <FormError\n                            error={this.state.serverError}\n                            margin={true}\n                        />\n                        <div className={'form-group' + errorClass}>\n                            <input\n                                id='loginId'\n                                className='form-control'\n                                ref='loginId'\n                                name='loginId'\n                                value={this.state.loginId}\n                                onChange={this.handleLoginIdChange}\n                                placeholder={this.createLoginPlaceholder()}\n                                spellCheck='false'\n                                autoCapitalize='off'\n                            />\n                        </div>\n                        <div className={'form-group' + errorClass}>\n                            <input\n                                id='loginPassword'\n                                type='password'\n                                className='form-control'\n                                ref='password'\n                                name='password'\n                                value={this.state.password}\n                                onChange={this.handlePasswordChange}\n                                placeholder={Utils.localizeMessage('login.password', 'Password')}\n                                spellCheck='false'\n                            />\n                        </div>\n                        <div className='form-group'>\n                            <button\n                                id='loginButton'\n                                type='submit'\n                                className='btn btn-primary'\n                            >\n                                { loginButton }\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            );\n        }\n\n        if (global.window.mm_config.EnableOpenServer === 'true' && this.checkSignUpEnabled()) {\n            loginControls.push(\n                <div\n                    className='form-group'\n                    key='signup'\n                >\n                    <span>\n                        <FormattedMessage\n                            id='login.noAccount'\n                            defaultMessage=\"Don't have an account? \"\n                        />\n                        <Link\n                            id='signup'\n                            to={'/signup_user_complete' + this.props.location.search}\n                            className='signup-team-login'\n                        >\n                            <FormattedMessage\n                                id='login.create'\n                                defaultMessage='Create one now'\n                            />\n                        </Link>\n                    </span>\n                </div>\n            );\n        }\n\n        if (usernameSigninEnabled || emailSigninEnabled) {\n            loginControls.push(\n                <div\n                    key='forgotPassword'\n                    className='form-group'\n                >\n                    <Link to={'/reset_password'}>\n                        <FormattedMessage\n                            id='login.forgot'\n                            defaultMessage='I forgot my password'\n                        />\n                    </Link>\n                </div>\n            );\n        }\n\n        if ((emailSigninEnabled || usernameSigninEnabled || ldapEnabled) && (gitlabSigninEnabled || googleSigninEnabled || samlSigninEnabled || office365SigninEnabled)) {\n            loginControls.push(\n                <div\n                    key='divider'\n                    className='or__container'\n                >\n                    <FormattedMessage\n                        id='login.or'\n                        defaultMessage='or'\n                    />\n                </div>\n            );\n\n            loginControls.push(\n                <h5 key='oauthHeader'>\n                    <FormattedMessage\n                        id='login.signInWith'\n                        defaultMessage='Sign in with:'\n                    />\n                </h5>\n            );\n        }\n\n        if (gitlabSigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login gitlab'\n                    key='gitlab'\n                    href={Client4.getOAuthRoute() + '/gitlab/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.gitlab'\n                                defaultMessage='GitLab'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (googleSigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login google'\n                    key='google'\n                    href={Client4.getOAuthRoute() + '/google/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.google'\n                                defaultMessage='Google Apps'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (office365SigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login office365'\n                    key='office365'\n                    href={Client4.getOAuthRoute() + '/office365/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.office365'\n                                defaultMessage='Office 365'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (samlSigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login saml'\n                    key='saml'\n                    href={'/login/sso/saml' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon fa fa-lock fa--margin-top'/>\n                        <span>\n                            {global.window.mm_config.SamlLoginButtonText}\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (loginControls.length === 0) {\n            loginControls.push(\n                <FormError\n                    error={\n                        <FormattedMessage\n                            id='login.noMethods'\n                            defaultMessage='No sign-in methods are enabled. Please contact your System Administrator.'\n                        />\n                    }\n                    margin={true}\n                />\n            );\n        }\n\n        return (\n            <div>\n                {extraBox}\n                {loginControls}\n            </div>\n        );\n    }\n\n    render() {\n        let content;\n        let customContent;\n        let customClass;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.state.loginId}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = this.createLoginOptions();\n            customContent = this.createCustomLogin();\n            if (customContent) {\n                customClass = 'branded';\n            }\n        }\n\n        let description = null;\n        if (global.window.mm_license.IsLicensed === 'true' && global.window.mm_license.CustomBrand === 'true' && global.window.mm_config.EnableCustomBrand === 'true') {\n            description = global.window.mm_config.CustomDescriptionText;\n        } else {\n            description = (\n                <FormattedMessage\n                    id='web.root.signup_info'\n                    defaultMessage='All team communication in one place, searchable and accessible anywhere'\n                />\n            );\n        }\n\n        return (\n            <div>\n                <AnnouncementBar/>\n                <div className='col-sm-12'>\n                    <div className={'signup-team__container ' + customClass}>\n                        <div className='signup__markdown'>\n                            {customContent}\n                        </div>\n                        <img\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div className='signup__content'>\n                            <h1>{global.window.mm_config.SiteName}</h1>\n                            <h4 className='color--light'>\n                                {description}\n                            </h4>\n                            {content}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./components/login/login_controller.jsx"],"sourceRoot":""}