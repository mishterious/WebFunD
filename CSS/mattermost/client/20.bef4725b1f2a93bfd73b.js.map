{"version":3,"sources":["webpack:///20.bef4725b1f2a93bfd73b.js","webpack:///./components/signup/components/signup_email.jsx"],"names":["webpackJsonp","2507","module","exports","__webpack_require__","global","_interopRequireWildcard","obj","__esModule","newObj","key","Object","prototype","hasOwnProperty","call","default","_interopRequireDefault","defineProperty","value","_stringify","_stringify2","_getPrototypeOf","_getPrototypeOf2","_classCallCheck2","_classCallCheck3","_possibleConstructorReturn2","_possibleConstructorReturn3","_createClass2","_createClass3","_inherits2","_inherits3","_propTypes","_propTypes2","_react","_react2","_reactIntl","_reactRouterDom","_browser_history","_diagnostics_actions","_global_actions","GlobalActions","_team_actions","_user_actions","_browser_store","_browser_store2","_constants","_constants2","_utils","Utils","_logo","_logo2","_back_button","_back_button2","_loading_screen","_loading_screen2","SignupEmail","_React$Component","props","this","_this","__proto__","handleSubmit","bind","getInviteInfo","renderEmailSignup","isUserValid","state","get","location","object","trackEvent","_this2","data","URLSearchParams","search","hash","inviteId","email","teamDisplayName","teamName","teamId","loading","length","parsedData","JSON","parse","display_name","name","id","inviteData","setState","serverError","noOpenServerError","createElement","FormattedMessage","defaultMessage","user","_this3","loginById","password","setGlobalItem","usedBefore","loadMe","then","redirectTo","browserHistory","push","redirectUserToDefaultTeam","err","encodeURIComponent","message","isSubmitting","providedEmail","refs","trim","nameError","emailError","passwordError","isEmail","providedUsername","toLowerCase","usernameError","isValidUsername","values","min","MIN_USERNAME_LENGTH","max","MAX_USERNAME_LENGTH","providedPassword","pwdError","isValidPassword","getPasswordConfig","e","_this4","preventDefault","username","allow_marketing","createUserWithInvite","handleSignupSuccess","emailHelpText","className","emailDivStyle","nameHelpText","nameDivStyle","passwordDivStyle","yourEmailIs","FormattedHTMLMessage","siteName","window","mm_config","SiteName","emailContainerStyle","type","ref","defaultValue","placeholder","maxLength","autoFocus","spellCheck","autoCapitalize","onClick","disabled","emailSignup","EnableSignUpWithEmail","terms","TermsOfServiceLink","PrivacyPolicyLink","description","mm_license","IsLicensed","CustomBrand","EnableCustomBrand","CustomDescriptionText","src","Link","to","Component"],"mappings":"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","file":"20.bef4725b1f2a93bfd73b.js","sourcesContent":["webpackJsonp([20],{\n\n/***/ 2507:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _stringify = __webpack_require__(249);\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _getPrototypeOf = __webpack_require__(239);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(238);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(240);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _createClass2 = __webpack_require__(242);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _inherits2 = __webpack_require__(241);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _propTypes = __webpack_require__(21);\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = __webpack_require__(13);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactIntl = __webpack_require__(697);\n\nvar _reactRouterDom = __webpack_require__(244);\n\nvar _browser_history = __webpack_require__(248);\n\nvar _diagnostics_actions = __webpack_require__(742);\n\nvar _global_actions = __webpack_require__(715);\n\nvar GlobalActions = _interopRequireWildcard(_global_actions);\n\nvar _team_actions = __webpack_require__(761);\n\nvar _user_actions = __webpack_require__(717);\n\nvar _browser_store = __webpack_require__(767);\n\nvar _browser_store2 = _interopRequireDefault(_browser_store);\n\nvar _constants = __webpack_require__(43);\n\nvar _constants2 = _interopRequireDefault(_constants);\n\nvar _utils = __webpack_require__(698);\n\nvar Utils = _interopRequireWildcard(_utils);\n\nvar _logo = __webpack_require__(791);\n\nvar _logo2 = _interopRequireDefault(_logo);\n\nvar _back_button = __webpack_require__(792);\n\nvar _back_button2 = _interopRequireDefault(_back_button);\n\nvar _loading_screen = __webpack_require__(732);\n\nvar _loading_screen2 = _interopRequireDefault(_loading_screen);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar SignupEmail = function (_React$Component) {\n    (0, _inherits3.default)(SignupEmail, _React$Component);\n    (0, _createClass3.default)(SignupEmail, null, [{\n        key: 'propTypes',\n        get: function get() {\n            return {\n                location: _propTypes2.default.object\n            };\n        }\n    }]);\n\n    function SignupEmail(props) {\n        (0, _classCallCheck3.default)(this, SignupEmail);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (SignupEmail.__proto__ || (0, _getPrototypeOf2.default)(SignupEmail)).call(this, props));\n\n        _this.handleSubmit = _this.handleSubmit.bind(_this);\n\n        _this.getInviteInfo = _this.getInviteInfo.bind(_this);\n        _this.renderEmailSignup = _this.renderEmailSignup.bind(_this);\n        _this.isUserValid = _this.isUserValid.bind(_this);\n\n        _this.state = _this.getInviteInfo();\n        return _this;\n    }\n\n    (0, _createClass3.default)(SignupEmail, [{\n        key: 'componentDidMount',\n        value: function componentDidMount() {\n            (0, _diagnostics_actions.trackEvent)('signup', 'signup_user_01_welcome');\n        }\n    }, {\n        key: 'getInviteInfo',\n        value: function getInviteInfo() {\n            var _this2 = this;\n\n            var data = new URLSearchParams(this.props.location.search).get('d');\n            var hash = new URLSearchParams(this.props.location.search).get('h');\n            var inviteId = new URLSearchParams(this.props.location.search).get('id');\n            var email = '';\n            var teamDisplayName = '';\n            var teamName = '';\n            var teamId = '';\n            var loading = false;\n            var serverError = '';\n            var noOpenServerError = false;\n\n            if (hash && hash.length > 0) {\n                var parsedData = JSON.parse(data);\n                email = parsedData.email;\n                teamDisplayName = parsedData.display_name;\n                teamName = parsedData.name;\n                teamId = parsedData.id;\n            } else if (inviteId && inviteId.length > 0) {\n                loading = true;\n                (0, _team_actions.getInviteInfo)(inviteId, function (inviteData) {\n                    if (!inviteData) {\n                        _this2.setState({ loading: false });\n                        return;\n                    }\n\n                    _this2.setState({\n                        loading: false,\n                        serverError: '',\n                        teamDisplayName: inviteData.display_name,\n                        teamName: inviteData.name,\n                        teamId: inviteData.id\n                    });\n                }, function () {\n                    _this2.setState({\n                        loading: false,\n                        noOpenServerError: true,\n                        serverError: _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'signup_user_completed.invalid_invite',\n                            defaultMessage: 'The invite link was invalid.  Please speak with your Administrator to receive an invitation.'\n                        })\n                    });\n                });\n\n                data = null;\n                hash = null;\n            }\n\n            return {\n                data: data,\n                hash: hash,\n                email: email,\n                teamDisplayName: teamDisplayName,\n                teamName: teamName,\n                teamId: teamId,\n                inviteId: inviteId,\n                loading: loading,\n                serverError: serverError,\n                noOpenServerError: noOpenServerError\n            };\n        }\n    }, {\n        key: 'handleSignupSuccess',\n        value: function handleSignupSuccess(user, data) {\n            var _this3 = this;\n\n            (0, _diagnostics_actions.trackEvent)('signup', 'signup_user_02_complete');\n            (0, _user_actions.loginById)(data.id, user.password, '', function () {\n                if (_this3.state.hash > 0) {\n                    _browser_store2.default.setGlobalItem(_this3.state.hash, (0, _stringify2.default)({ usedBefore: true }));\n                }\n\n                (0, _user_actions.loadMe)().then(function () {\n                    var redirectTo = new URLSearchParams(_this3.props.location.search).get('redirect_to');\n                    if (redirectTo) {\n                        _browser_history.browserHistory.push(redirectTo);\n                    } else {\n                        GlobalActions.redirectUserToDefaultTeam();\n                    }\n                });\n            }, function (err) {\n                if (err.id === 'api.user.login.not_verified.app_error') {\n                    _browser_history.browserHistory.push('/should_verify_email?email=' + encodeURIComponent(user.email) + '&teamname=' + encodeURIComponent(_this3.state.teamName));\n                } else {\n                    _this3.setState({\n                        serverError: err.message,\n                        isSubmitting: false\n                    });\n                }\n            });\n        }\n    }, {\n        key: 'isUserValid',\n        value: function isUserValid() {\n            var providedEmail = this.refs.email.value.trim();\n            if (!providedEmail) {\n                this.setState({\n                    nameError: '',\n                    emailError: _react2.default.createElement(_reactIntl.FormattedMessage, { id: 'signup_user_completed.required' }),\n                    passwordError: '',\n                    serverError: ''\n                });\n                return false;\n            }\n\n            if (!Utils.isEmail(providedEmail)) {\n                this.setState({\n                    nameError: '',\n                    emailError: _react2.default.createElement(_reactIntl.FormattedMessage, { id: 'signup_user_completed.validEmail' }),\n                    passwordError: '',\n                    serverError: ''\n                });\n                return false;\n            }\n\n            var providedUsername = this.refs.name.value.trim().toLowerCase();\n            if (!providedUsername) {\n                this.setState({\n                    nameError: _react2.default.createElement(_reactIntl.FormattedMessage, { id: 'signup_user_completed.required' }),\n                    emailError: '',\n                    passwordError: '',\n                    serverError: ''\n                });\n                return false;\n            }\n\n            var usernameError = Utils.isValidUsername(providedUsername);\n            if (usernameError === 'Cannot use a reserved word as a username.') {\n                this.setState({\n                    nameError: _react2.default.createElement(_reactIntl.FormattedMessage, { id: 'signup_user_completed.reserved' }),\n                    emailError: '',\n                    passwordError: '',\n                    serverError: ''\n                });\n                return false;\n            } else if (usernameError) {\n                this.setState({\n                    nameError: _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'signup_user_completed.usernameLength',\n                        values: {\n                            min: _constants2.default.MIN_USERNAME_LENGTH,\n                            max: _constants2.default.MAX_USERNAME_LENGTH\n                        }\n                    }),\n                    emailError: '',\n                    passwordError: '',\n                    serverError: ''\n                });\n                return false;\n            }\n\n            var providedPassword = this.refs.password.value;\n            var pwdError = Utils.isValidPassword(providedPassword, Utils.getPasswordConfig());\n            if (pwdError) {\n                this.setState({\n                    nameError: '',\n                    emailError: '',\n                    passwordError: pwdError,\n                    serverError: ''\n                });\n                return false;\n            }\n\n            return true;\n        }\n    }, {\n        key: 'handleSubmit',\n        value: function handleSubmit(e) {\n            var _this4 = this;\n\n            e.preventDefault();\n\n            // bail out if a submission is already in progress\n            if (this.state.isSubmitting) {\n                return;\n            }\n\n            if (this.isUserValid()) {\n                this.setState({\n                    nameError: '',\n                    emailError: '',\n                    passwordError: '',\n                    serverError: '',\n                    isSubmitting: true\n                });\n\n                var user = {\n                    email: this.refs.email.value.trim(),\n                    username: this.refs.name.value.trim().toLowerCase(),\n                    password: this.refs.password.value,\n                    allow_marketing: true\n                };\n\n                (0, _user_actions.createUserWithInvite)(user, this.state.data, this.state.hash, this.state.inviteId, this.handleSignupSuccess.bind(this, user), function (err) {\n                    _this4.setState({\n                        serverError: err.message,\n                        isSubmitting: false\n                    });\n                });\n            }\n        }\n    }, {\n        key: 'renderEmailSignup',\n        value: function renderEmailSignup() {\n            var emailError = null;\n            var emailHelpText = _react2.default.createElement(\n                'span',\n                { className: 'help-block' },\n                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                    id: 'signup_user_completed.emailHelp',\n                    defaultMessage: 'Valid email required for sign-up'\n                })\n            );\n            var emailDivStyle = 'form-group';\n            if (this.state.emailError) {\n                emailError = _react2.default.createElement(\n                    'label',\n                    { className: 'control-label' },\n                    this.state.emailError\n                );\n                emailHelpText = '';\n                emailDivStyle += ' has-error';\n            }\n\n            var nameError = null;\n            var nameHelpText = _react2.default.createElement(\n                'span',\n                { className: 'help-block' },\n                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                    id: 'signup_user_completed.userHelp',\n                    defaultMessage: 'Username must begin with a letter, and contain between {min} to {max} lowercase characters made up of numbers, letters, and the symbols \\'.\\', \\'-\\' and \\'_\\'',\n                    values: {\n                        min: _constants2.default.MIN_USERNAME_LENGTH,\n                        max: _constants2.default.MAX_USERNAME_LENGTH\n                    }\n                })\n            );\n            var nameDivStyle = 'form-group';\n            if (this.state.nameError) {\n                nameError = _react2.default.createElement(\n                    'label',\n                    { className: 'control-label' },\n                    this.state.nameError\n                );\n                nameHelpText = '';\n                nameDivStyle += ' has-error';\n            }\n\n            var passwordError = null;\n            var passwordDivStyle = 'form-group';\n            if (this.state.passwordError) {\n                passwordError = _react2.default.createElement(\n                    'label',\n                    { className: 'control-label' },\n                    this.state.passwordError\n                );\n                passwordDivStyle += ' has-error';\n            }\n\n            var yourEmailIs = null;\n            if (this.state.email) {\n                yourEmailIs = _react2.default.createElement(_reactIntl.FormattedHTMLMessage, {\n                    id: 'signup_user_completed.emailIs',\n                    defaultMessage: 'Your email address is <strong>{email}</strong>. You\\'ll use this address to sign in to {siteName}.',\n                    values: {\n                        email: this.state.email,\n                        siteName: global.window.mm_config.SiteName\n                    }\n                });\n            }\n\n            var emailContainerStyle = 'margin--extra';\n            if (this.state.email) {\n                emailContainerStyle = 'hidden';\n            }\n\n            return _react2.default.createElement(\n                'form',\n                null,\n                _react2.default.createElement(\n                    'div',\n                    { className: 'inner__content' },\n                    _react2.default.createElement(\n                        'div',\n                        { className: emailContainerStyle },\n                        _react2.default.createElement(\n                            'h5',\n                            null,\n                            _react2.default.createElement(\n                                'strong',\n                                null,\n                                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                    id: 'signup_user_completed.whatis',\n                                    defaultMessage: 'What\\'s your email address?'\n                                })\n                            )\n                        ),\n                        _react2.default.createElement(\n                            'div',\n                            { className: emailDivStyle },\n                            _react2.default.createElement('input', {\n                                id: 'email',\n                                type: 'email',\n                                ref: 'email',\n                                className: 'form-control',\n                                defaultValue: this.state.email,\n                                placeholder: '',\n                                maxLength: '128',\n                                autoFocus: true,\n                                spellCheck: 'false',\n                                autoCapitalize: 'off'\n                            }),\n                            emailError,\n                            emailHelpText\n                        )\n                    ),\n                    yourEmailIs,\n                    _react2.default.createElement(\n                        'div',\n                        { className: 'margin--extra' },\n                        _react2.default.createElement(\n                            'h5',\n                            null,\n                            _react2.default.createElement(\n                                'strong',\n                                null,\n                                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                    id: 'signup_user_completed.chooseUser',\n                                    defaultMessage: 'Choose your username'\n                                })\n                            )\n                        ),\n                        _react2.default.createElement(\n                            'div',\n                            { className: nameDivStyle },\n                            _react2.default.createElement('input', {\n                                id: 'name',\n                                type: 'text',\n                                ref: 'name',\n                                className: 'form-control',\n                                placeholder: '',\n                                maxLength: _constants2.default.MAX_USERNAME_LENGTH,\n                                spellCheck: 'false',\n                                autoCapitalize: 'off'\n                            }),\n                            nameError,\n                            nameHelpText\n                        )\n                    ),\n                    _react2.default.createElement(\n                        'div',\n                        { className: 'margin--extra' },\n                        _react2.default.createElement(\n                            'h5',\n                            null,\n                            _react2.default.createElement(\n                                'strong',\n                                null,\n                                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                    id: 'signup_user_completed.choosePwd',\n                                    defaultMessage: 'Choose your password'\n                                })\n                            )\n                        ),\n                        _react2.default.createElement(\n                            'div',\n                            { className: passwordDivStyle },\n                            _react2.default.createElement('input', {\n                                id: 'password',\n                                type: 'password',\n                                ref: 'password',\n                                className: 'form-control',\n                                placeholder: '',\n                                maxLength: '128',\n                                spellCheck: 'false'\n                            }),\n                            passwordError\n                        )\n                    ),\n                    _react2.default.createElement(\n                        'p',\n                        { className: 'margin--extra' },\n                        _react2.default.createElement(\n                            'button',\n                            {\n                                id: 'createAccountButton',\n                                type: 'submit',\n                                onClick: this.handleSubmit,\n                                className: 'btn-primary btn',\n                                disabled: this.state.isSubmitting\n                            },\n                            _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                id: 'signup_user_completed.create',\n                                defaultMessage: 'Create Account'\n                            })\n                        )\n                    )\n                )\n            );\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var serverError = null;\n            if (this.state.serverError) {\n                serverError = _react2.default.createElement(\n                    'div',\n                    { className: 'form-group has-error' },\n                    _react2.default.createElement(\n                        'label',\n                        { className: 'control-label' },\n                        this.state.serverError\n                    )\n                );\n            }\n\n            if (this.state.loading) {\n                return _react2.default.createElement(_loading_screen2.default, null);\n            }\n\n            var emailSignup = void 0;\n            if (global.window.mm_config.EnableSignUpWithEmail === 'true') {\n                emailSignup = this.renderEmailSignup();\n            } else {\n                return null;\n            }\n\n            var terms = null;\n            if (!this.state.noOpenServerError && emailSignup) {\n                terms = _react2.default.createElement(\n                    'p',\n                    null,\n                    _react2.default.createElement(_reactIntl.FormattedHTMLMessage, {\n                        id: 'create_team.agreement',\n                        defaultMessage: 'By proceeding to create your account and use {siteName}, you agree to our <a href=\\'{TermsOfServiceLink}\\'>Terms of Service</a> and <a href=\\'{PrivacyPolicyLink}\\'>Privacy Policy</a>. If you do not agree, you cannot use {siteName}.',\n                        values: {\n                            siteName: global.window.mm_config.SiteName,\n                            TermsOfServiceLink: global.window.mm_config.TermsOfServiceLink,\n                            PrivacyPolicyLink: global.window.mm_config.PrivacyPolicyLink\n                        }\n                    })\n                );\n            }\n\n            if (this.state.noOpenServerError) {\n                emailSignup = null;\n            }\n\n            var description = null;\n            if (global.window.mm_license.IsLicensed === 'true' && global.window.mm_license.CustomBrand === 'true' && global.window.mm_config.EnableCustomBrand === 'true') {\n                description = global.window.mm_config.CustomDescriptionText;\n            } else {\n                description = _react2.default.createElement(_reactIntl.FormattedMessage, {\n                    id: 'web.root.signup_info',\n                    defaultMessage: 'All team communication in one place, searchable and accessible anywhere'\n                });\n            }\n\n            return _react2.default.createElement(\n                'div',\n                null,\n                _react2.default.createElement(_back_button2.default, null),\n                _react2.default.createElement(\n                    'div',\n                    { className: 'col-sm-12' },\n                    _react2.default.createElement(\n                        'div',\n                        { className: 'signup-team__container padding--less' },\n                        _react2.default.createElement('img', {\n                            className: 'signup-team-logo',\n                            src: _logo2.default\n                        }),\n                        _react2.default.createElement(\n                            'h1',\n                            null,\n                            global.window.mm_config.SiteName\n                        ),\n                        _react2.default.createElement(\n                            'h4',\n                            { className: 'color--light' },\n                            description\n                        ),\n                        _react2.default.createElement(\n                            'h4',\n                            { className: 'color--light' },\n                            _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                id: 'signup_user_completed.lets',\n                                defaultMessage: 'Let\\'s create your account'\n                            })\n                        ),\n                        _react2.default.createElement(\n                            'span',\n                            { className: 'color--light' },\n                            _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                id: 'signup_user_completed.haveAccount',\n                                defaultMessage: 'Already have an account?'\n                            }),\n                            ' ',\n                            _react2.default.createElement(\n                                _reactRouterDom.Link,\n                                {\n                                    to: '/login' + this.props.location.search\n                                },\n                                _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                    id: 'signup_user_completed.signIn',\n                                    defaultMessage: 'Click here to sign in.'\n                                })\n                            )\n                        ),\n                        emailSignup,\n                        serverError,\n                        terms\n                    )\n                )\n            );\n        }\n    }]);\n    return SignupEmail;\n}(_react2.default.Component); // Copyright (c) 2016-present Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nexports.default = SignupEmail;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(22)))\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 20.bef4725b1f2a93bfd73b.js","// Copyright (c) 2016-present Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {browserHistory} from 'utils/browser_history';\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport {getInviteInfo} from 'actions/team_actions.jsx';\nimport {createUserWithInvite, loadMe, loginById} from 'actions/user_actions.jsx';\nimport BrowserStore from 'stores/browser_store.jsx';\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport logoImage from 'images/logo.png';\nimport BackButton from 'components/common/back_button.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nexport default class SignupEmail extends React.Component {\n    static get propTypes() {\n        return {\n            location: PropTypes.object\n        };\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n        this.getInviteInfo = this.getInviteInfo.bind(this);\n        this.renderEmailSignup = this.renderEmailSignup.bind(this);\n        this.isUserValid = this.isUserValid.bind(this);\n\n        this.state = this.getInviteInfo();\n    }\n\n    componentDidMount() {\n        trackEvent('signup', 'signup_user_01_welcome');\n    }\n\n    getInviteInfo() {\n        let data = (new URLSearchParams(this.props.location.search)).get('d');\n        let hash = (new URLSearchParams(this.props.location.search)).get('h');\n        const inviteId = (new URLSearchParams(this.props.location.search)).get('id');\n        let email = '';\n        let teamDisplayName = '';\n        let teamName = '';\n        let teamId = '';\n        let loading = false;\n        const serverError = '';\n        const noOpenServerError = false;\n\n        if (hash && hash.length > 0) {\n            const parsedData = JSON.parse(data);\n            email = parsedData.email;\n            teamDisplayName = parsedData.display_name;\n            teamName = parsedData.name;\n            teamId = parsedData.id;\n        } else if (inviteId && inviteId.length > 0) {\n            loading = true;\n            getInviteInfo(\n                inviteId,\n                (inviteData) => {\n                    if (!inviteData) {\n                        this.setState({loading: false});\n                        return;\n                    }\n\n                    this.setState({\n                        loading: false,\n                        serverError: '',\n                        teamDisplayName: inviteData.display_name,\n                        teamName: inviteData.name,\n                        teamId: inviteData.id\n                    });\n                },\n                () => {\n                    this.setState({\n                        loading: false,\n                        noOpenServerError: true,\n                        serverError: (\n                            <FormattedMessage\n                                id='signup_user_completed.invalid_invite'\n                                defaultMessage='The invite link was invalid.  Please speak with your Administrator to receive an invitation.'\n                            />\n                        )\n                    });\n                }\n            );\n\n            data = null;\n            hash = null;\n        }\n\n        return {\n            data,\n            hash,\n            email,\n            teamDisplayName,\n            teamName,\n            teamId,\n            inviteId,\n            loading,\n            serverError,\n            noOpenServerError\n        };\n    }\n\n    handleSignupSuccess(user, data) {\n        trackEvent('signup', 'signup_user_02_complete');\n        loginById(\n            data.id,\n            user.password,\n            '',\n            () => {\n                if (this.state.hash > 0) {\n                    BrowserStore.setGlobalItem(this.state.hash, JSON.stringify({usedBefore: true}));\n                }\n\n                loadMe().then(\n                    () => {\n                        const redirectTo = (new URLSearchParams(this.props.location.search)).get('redirect_to');\n                        if (redirectTo) {\n                            browserHistory.push(redirectTo);\n                        } else {\n                            GlobalActions.redirectUserToDefaultTeam();\n                        }\n                    }\n                );\n            },\n            (err) => {\n                if (err.id === 'api.user.login.not_verified.app_error') {\n                    browserHistory.push('/should_verify_email?email=' + encodeURIComponent(user.email) + '&teamname=' + encodeURIComponent(this.state.teamName));\n                } else {\n                    this.setState({\n                        serverError: err.message,\n                        isSubmitting: false\n                    });\n                }\n            }\n        );\n    }\n\n    isUserValid() {\n        const providedEmail = this.refs.email.value.trim();\n        if (!providedEmail) {\n            this.setState({\n                nameError: '',\n                emailError: (<FormattedMessage id='signup_user_completed.required'/>),\n                passwordError: '',\n                serverError: ''\n            });\n            return false;\n        }\n\n        if (!Utils.isEmail(providedEmail)) {\n            this.setState({\n                nameError: '',\n                emailError: (<FormattedMessage id='signup_user_completed.validEmail'/>),\n                passwordError: '',\n                serverError: ''\n            });\n            return false;\n        }\n\n        const providedUsername = this.refs.name.value.trim().toLowerCase();\n        if (!providedUsername) {\n            this.setState({\n                nameError: (<FormattedMessage id='signup_user_completed.required'/>),\n                emailError: '',\n                passwordError: '',\n                serverError: ''\n            });\n            return false;\n        }\n\n        const usernameError = Utils.isValidUsername(providedUsername);\n        if (usernameError === 'Cannot use a reserved word as a username.') {\n            this.setState({\n                nameError: (<FormattedMessage id='signup_user_completed.reserved'/>),\n                emailError: '',\n                passwordError: '',\n                serverError: ''\n            });\n            return false;\n        } else if (usernameError) {\n            this.setState({\n                nameError: (\n                    <FormattedMessage\n                        id='signup_user_completed.usernameLength'\n                        values={{\n                            min: Constants.MIN_USERNAME_LENGTH,\n                            max: Constants.MAX_USERNAME_LENGTH\n                        }}\n                    />\n                ),\n                emailError: '',\n                passwordError: '',\n                serverError: ''\n            });\n            return false;\n        }\n\n        const providedPassword = this.refs.password.value;\n        const pwdError = Utils.isValidPassword(providedPassword, Utils.getPasswordConfig());\n        if (pwdError) {\n            this.setState({\n                nameError: '',\n                emailError: '',\n                passwordError: pwdError,\n                serverError: ''\n            });\n            return false;\n        }\n\n        return true;\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n\n        // bail out if a submission is already in progress\n        if (this.state.isSubmitting) {\n            return;\n        }\n\n        if (this.isUserValid()) {\n            this.setState({\n                nameError: '',\n                emailError: '',\n                passwordError: '',\n                serverError: '',\n                isSubmitting: true\n            });\n\n            const user = {\n                email: this.refs.email.value.trim(),\n                username: this.refs.name.value.trim().toLowerCase(),\n                password: this.refs.password.value,\n                allow_marketing: true\n            };\n\n            createUserWithInvite(user,\n                this.state.data,\n                this.state.hash,\n                this.state.inviteId,\n                this.handleSignupSuccess.bind(this, user),\n                (err) => {\n                    this.setState({\n                        serverError: err.message,\n                        isSubmitting: false\n                    });\n                }\n            );\n        }\n    }\n\n    renderEmailSignup() {\n        let emailError = null;\n        let emailHelpText = (\n            <span className='help-block'>\n                <FormattedMessage\n                    id='signup_user_completed.emailHelp'\n                    defaultMessage='Valid email required for sign-up'\n                />\n            </span>\n        );\n        let emailDivStyle = 'form-group';\n        if (this.state.emailError) {\n            emailError = (<label className='control-label'>{this.state.emailError}</label>);\n            emailHelpText = '';\n            emailDivStyle += ' has-error';\n        }\n\n        let nameError = null;\n        let nameHelpText = (\n            <span className='help-block'>\n                <FormattedMessage\n                    id='signup_user_completed.userHelp'\n                    defaultMessage=\"Username must begin with a letter, and contain between {min} to {max} lowercase characters made up of numbers, letters, and the symbols '.', '-' and '_'\"\n                    values={{\n                        min: Constants.MIN_USERNAME_LENGTH,\n                        max: Constants.MAX_USERNAME_LENGTH\n                    }}\n                />\n            </span>\n        );\n        let nameDivStyle = 'form-group';\n        if (this.state.nameError) {\n            nameError = <label className='control-label'>{this.state.nameError}</label>;\n            nameHelpText = '';\n            nameDivStyle += ' has-error';\n        }\n\n        let passwordError = null;\n        let passwordDivStyle = 'form-group';\n        if (this.state.passwordError) {\n            passwordError = <label className='control-label'>{this.state.passwordError}</label>;\n            passwordDivStyle += ' has-error';\n        }\n\n        let yourEmailIs = null;\n        if (this.state.email) {\n            yourEmailIs = (\n                <FormattedHTMLMessage\n                    id='signup_user_completed.emailIs'\n                    defaultMessage=\"Your email address is <strong>{email}</strong>. You'll use this address to sign in to {siteName}.\"\n                    values={{\n                        email: this.state.email,\n                        siteName: global.window.mm_config.SiteName\n                    }}\n                />\n            );\n        }\n\n        let emailContainerStyle = 'margin--extra';\n        if (this.state.email) {\n            emailContainerStyle = 'hidden';\n        }\n\n        return (\n            <form>\n                <div className='inner__content'>\n                    <div className={emailContainerStyle}>\n                        <h5><strong>\n                            <FormattedMessage\n                                id='signup_user_completed.whatis'\n                                defaultMessage=\"What's your email address?\"\n                            />\n                        </strong></h5>\n                        <div className={emailDivStyle}>\n                            <input\n                                id='email'\n                                type='email'\n                                ref='email'\n                                className='form-control'\n                                defaultValue={this.state.email}\n                                placeholder=''\n                                maxLength='128'\n                                autoFocus={true}\n                                spellCheck='false'\n                                autoCapitalize='off'\n                            />\n                            {emailError}\n                            {emailHelpText}\n                        </div>\n                    </div>\n                    {yourEmailIs}\n                    <div className='margin--extra'>\n                        <h5><strong>\n                            <FormattedMessage\n                                id='signup_user_completed.chooseUser'\n                                defaultMessage='Choose your username'\n                            />\n                        </strong></h5>\n                        <div className={nameDivStyle}>\n                            <input\n                                id='name'\n                                type='text'\n                                ref='name'\n                                className='form-control'\n                                placeholder=''\n                                maxLength={Constants.MAX_USERNAME_LENGTH}\n                                spellCheck='false'\n                                autoCapitalize='off'\n                            />\n                            {nameError}\n                            {nameHelpText}\n                        </div>\n                    </div>\n                    <div className='margin--extra'>\n                        <h5><strong>\n                            <FormattedMessage\n                                id='signup_user_completed.choosePwd'\n                                defaultMessage='Choose your password'\n                            />\n                        </strong></h5>\n                        <div className={passwordDivStyle}>\n                            <input\n                                id='password'\n                                type='password'\n                                ref='password'\n                                className='form-control'\n                                placeholder=''\n                                maxLength='128'\n                                spellCheck='false'\n                            />\n                            {passwordError}\n                        </div>\n                    </div>\n                    <p className='margin--extra'>\n                        <button\n                            id='createAccountButton'\n                            type='submit'\n                            onClick={this.handleSubmit}\n                            className='btn-primary btn'\n                            disabled={this.state.isSubmitting}\n                        >\n                            <FormattedMessage\n                                id='signup_user_completed.create'\n                                defaultMessage='Create Account'\n                            />\n                        </button>\n                    </p>\n                </div>\n            </form>\n        );\n    }\n\n    render() {\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div className={'form-group has-error'}>\n                    <label className='control-label'>{this.state.serverError}</label>\n                </div>\n            );\n        }\n\n        if (this.state.loading) {\n            return (<LoadingScreen/>);\n        }\n\n        let emailSignup;\n        if (global.window.mm_config.EnableSignUpWithEmail === 'true') {\n            emailSignup = this.renderEmailSignup();\n        } else {\n            return null;\n        }\n\n        let terms = null;\n        if (!this.state.noOpenServerError && emailSignup) {\n            terms = (\n                <p>\n                    <FormattedHTMLMessage\n                        id='create_team.agreement'\n                        defaultMessage=\"By proceeding to create your account and use {siteName}, you agree to our <a href='{TermsOfServiceLink}'>Terms of Service</a> and <a href='{PrivacyPolicyLink}'>Privacy Policy</a>. If you do not agree, you cannot use {siteName}.\"\n                        values={{\n                            siteName: global.window.mm_config.SiteName,\n                            TermsOfServiceLink: global.window.mm_config.TermsOfServiceLink,\n                            PrivacyPolicyLink: global.window.mm_config.PrivacyPolicyLink\n                        }}\n                    />\n                </p>\n            );\n        }\n\n        if (this.state.noOpenServerError) {\n            emailSignup = null;\n        }\n\n        let description = null;\n        if (global.window.mm_license.IsLicensed === 'true' && global.window.mm_license.CustomBrand === 'true' && global.window.mm_config.EnableCustomBrand === 'true') {\n            description = global.window.mm_config.CustomDescriptionText;\n        } else {\n            description = (\n                <FormattedMessage\n                    id='web.root.signup_info'\n                    defaultMessage='All team communication in one place, searchable and accessible anywhere'\n                />\n            );\n        }\n\n        return (\n            <div>\n                <BackButton/>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container padding--less'>\n                        <img\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <h1>{global.window.mm_config.SiteName}</h1>\n                        <h4 className='color--light'>\n                            {description}\n                        </h4>\n                        <h4 className='color--light'>\n                            <FormattedMessage\n                                id='signup_user_completed.lets'\n                                defaultMessage=\"Let's create your account\"\n                            />\n                        </h4>\n                        <span className='color--light'>\n                            <FormattedMessage\n                                id='signup_user_completed.haveAccount'\n                                defaultMessage='Already have an account?'\n                            />\n                            {' '}\n                            <Link\n                                to={'/login' + this.props.location.search}\n                            >\n                                <FormattedMessage\n                                    id='signup_user_completed.signIn'\n                                    defaultMessage='Click here to sign in.'\n                                />\n                            </Link>\n                        </span>\n                        {emailSignup}\n                        {serverError}\n                        {terms}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./components/signup/components/signup_email.jsx"],"sourceRoot":""}